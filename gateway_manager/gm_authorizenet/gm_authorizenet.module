<?php

/**
 * @file
 * Process payments using Authorize.net. Supports AIM and ARB.
 */

// Define basic gateway URLs
define('gm_authorizenet_TEST_GATEWAY_URL', 'https://test.authorize.net/gateway/transact.dll');
define('gm_authorizenet_LIVE_GATEWAY_URL', 'https://secure.authorize.net/gateway/transact.dll');

// Define some error codes used to check the error type
DEFINE('AUTH_NET_ERROR_DUPLICATE_TRANSACTION', 11);
DEFINE('AUTH_NET_ERROR_CC_NUMBER_INVALID', 37);
DEFINE('AUTH_NET_ERROR_INVALID_METHOD', 70);
DEFINE('AUTH_NET_ERROR_INVALID_FORM_TYPE', 81);
DEFINE('AUTH_NET_ERROR_AVS_MISMATCH', 127);

/**
 * Implementation of hook_menu().
 */
function gm_authorizenet_menu() {
  $items = array();
  $items['authnet/silent-post'] = array(
    'page callback' => 'gm_authorizenet_silent_post',
    'access callback' => 'gm_authorizenet_silent_post_access',
    'type' => MENU_CALLBACK,
    'file' => 'gm_authorizenet.pages.inc',
  );
  return $items;
}

/**
 * Menu permission check. Make sure Authorize.Net always has access to send Silent POSTs.
 */
function gm_authorizenet_silent_post_access() {
  return TRUE;
}

/**
 * Implementation of hook_payment_gateway_managed().
 */
function gm_authorizenet_payment_gateway_managed() {
  $gateways[] = array(
    'id' => 'gm_authorizenet',
    'title' => t('Authorize.net'),
    'description' => t('Process credit card payments using the AIM service of Authorize.net.'),
    'settings' => 'gm_authorizenet_settings_form',
    'credit' => 'gm_authorizenet_charge',
    'credit_refund' => 'gm_authorizenet_refund',
    'credit_txn_types' => array(UC_CREDIT_AUTH_ONLY, UC_CREDIT_PRIOR_AUTH_CAPTURE, UC_CREDIT_AUTH_CAPTURE, UC_CREDIT_REFERENCE_SET, UC_CREDIT_REFERENCE_TXN),
  );
  return $gateways;
}

/**
 * Callback for payment gateway settings.
 */
function gm_authorizenet_settings_form($config = array()) {
  $login_data = _gm_authorizenet_login_data();
  // Allow admin to set passing along emails.
  $form['gm_authnet_hide_emails'] = array(
    '#type' => 'checkbox',
    '#title' => t('Do not pass donor email to Authnet'),
    '#description' => t('Blocks submission of sensitive email information along with transactions.'),
    '#default_value' => !empty($config['gm_authnet_hide_emails']) ? $config['gm_authnet_hide_emails'] : 0,
    '#return_value' => 1,
  );
  // Allow admin to set duplicate window
  $form['gm_authnet_duplicate_window'] = array(
    '#type' => 'select',
    '#title' => t('Duplicate window'),
    '#description' => t('Blocks submission of duplicate transactions within the specified window.'),
    '#default_value' => !empty($config['gm_authnet_duplicate_window']) ? $config['gm_authnet_duplicate_window'] : 120,
    '#options' => drupal_map_assoc(array(0, 15, 30, 45, 60, 75, 90, 105, 120)),
  );
  // Key settings.
  $form['api_id_key'] = array(
    '#type' => 'fieldset',
    '#title' => t('API Login ID and Transaction Key'),
    '#description' => t('This information is required for Ubercart to interact with your payment gateway account. ' .
      'It is different from your login ID and password and may be found through your account settings page.  Do not ' .
      'change the gateway URLs unless you are using this module with an Authorize.net-compatible gateway that requires different URLs.'),
  );
  $form['api_id_key']['gm_authnet_api_login_id'] = array(
    '#type' => 'textfield',
    '#title' => t('API Login ID'),
    '#default_value' => $config['gm_authnet_api_login_id'],
  );
  $form['api_id_key']['gm_authnet_api_transaction_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Transaction Key'),
    '#default_value' => $config['gm_authnet_api_transaction_key'],
  );
  $form['api_id_key']['gm_authnet_api_test_gateway_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Authorize.net Test Gateway URL'),
    '#default_value' => !empty($config['gm_authnet_api_test_gateway_url']) ? $config['gm_authnet_api_test_gateway_url'] : gm_authorizenet_TEST_GATEWAY_URL,
  );
  $form['api_id_key']['gm_authnet_api_live_gateway_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Authorize.net Live Gateway URL'),
    '#default_value' => !empty($config['gm_authnet_api_live_gateway_url']) ? $config['gm_authnet_api_live_gateway_url'] : gm_authorizenet_LIVE_GATEWAY_URL,
  );
  // AIM settings. See: https://developer.authorize.net/guides/AIM/
  $form['aim_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('AIM settings'),
    '#description' => t('These settings pertain to the Authorize.Net AIM payment method for card not present transactions.'),
  );
  $form['aim_settings']['gm_authnet_aim_txn_mode'] = array(
    '#type' => 'radios',
    '#title' => t('Transaction mode'),
    '#description' => t('Only specify a developer test account if you login to your account through https://test.authorize.net.<br />' .
      'Adjust to live transactions when you are ready to start processing real payments.'),
    '#options' => array(
      'live' => t('Live transactions in a live account'),
      'live_test' => t('Test transactions in a live account'),
      'developer_test' => t('Developer test account transactions'),
    ),
    '#default_value' => !empty($config['gm_authnet_aim_txn_mode']) ? $config['gm_authnet_aim_txn_mode'] : 'live_test',
  );
  $form['aim_settings']['gm_authnet_aim_email_customer'] = array(
    '#type' => 'checkbox',
    '#title' => t('Tell Authorize.net to e-mail the customer a receipt based on your account settings.'),
    '#default_value' => !empty($config['gm_authnet_aim_email_customer']) ? $config['gm_authnet_aim_email_customer'] : FALSE,
  );
  $form['aim_settings']['gm_authnet_response_debug'] = array(
    '#type' => 'checkbox',
    '#title' => t('Log full API response messages from Authorize.net for debugging.'),
    '#default_value' => !empty($config['gm_authnet_response_debug']) ? $config['gm_authnet_response_debug'] : FALSE,
  );
  // CIM settings. See: http://developer.authorize.net/api/cim/
  $form['cim_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('CIM settings'),
    '#description' => t('These settings pertain to the Authorize.Net Customer Information Management service.')
  );
  $form['cim_settings']['gm_authnet_cim_profile'] = array(
    '#type' => 'checkbox',
    '#title' => t('Always create a CIM profile for securely storing CC info for later use.'),
    '#default_value' => !empty($config['gm_authnet_cim_profile']) ? $config['gm_authnet_cim_profile'] : FALSE,
  );
  $form['cim_settings']['gm_authnet_cim_mode'] = array(
    '#type' => 'radios',
    '#title' => t('Transaction mode'),
    '#description' => t('Only specify a developer test account if you login to your account through https://test.authorize.net.<br />' .
      'Adjust to live transactions when you are ready to start processing real payments.'),
    '#options' => array(
      'production' => t('Production'),
      'developer' => t('Developer test'),
      'disabled' => t('Disabled'),
    ),
    '#default_value' => !empty($config['gm_authnet_cim_mode']) ? $config['gm_authnet_cim_mode'] : 'disabled',
  );
  $form['settings']['value_map'] = array(
    '#type' => 'fieldset',
    '#title' => t('Submission mapping'),
    '#description' => t('During a transaction some additional data from the form submission may be passed along to Authorize.net as ' .
      'Merchant defined fields. See: https://developer.authorize.net/guides/AIM/Transaction_Data_Requirements/Merchant-defined_Fields.htm ' .
      'Please map up to five fields - by their webform field key to the correct field key as defined at Authorize.net.'),
    '#tree' => TRUE,
  );
  // TODO Currently only five allowed values. We can make this AJAXy and n-th available later.
  for ($i=1; $i<6; $i++) {
    $form['settings']['gm_authnet_webform_field_' . $i] = array(
      '#title' => t('Webform field #%i', array('%i' => $i)),
      '#type' => 'textfield',
      '#default_value' => !empty($config['gm_authnet_webform_field_' . $i]) ? $config['gm_authnet_webform_field_' . $i] : '',
    );
    $form['settings']['gm_authnet_authorize_field_' . $i] = array(
      '#title' => t('Authorize field #%i', array('%i' => $i)),
      '#type' => 'textfield',
      '#default_value' => !empty($config['gm_authnet_authorize_field_' . $i]) ? $config['gm_authnet_authorize_field_' . $i] : '',
    );
  }
  return $form;
}

/**
 * Implementation of hook_form_alter().
 */
function gm_authorizenet_form_alter(&$form, $form_state, $form_id) {
  // Add a submission call for ubercart form modifications.
  if ($form_id == 'uc_payment_gateways_form') {
    $form['#submit'][] = 'gm_authorizenet_payment_gateway_settings_submit';
  }
}

/**
 * Submit handler for payment gateway settings form to encrypt fields.
 */
function gm_authorizenet_payment_gateway_settings_submit($form, &$form_state) {
  // If CC encryption has been configured properly.
  if ($key = uc_credit_encryption_key()) {
    // Setup our encryption object.
    $crypt = new uc_encryption_class;
    // Encrypt the Login ID, Transaction key, and MD5 Hash.
    if (!empty($form_state['values']['uc_authnet_md5_hash'])) {
      variable_set('uc_authnet_md5_hash', $crypt->encrypt($key, $form_state['values']['uc_authnet_md5_hash']));
    }
    // Store any errors.
    uc_store_encryption_errors($crypt, 'uc_authorizenet');
  }
}

// Main handler for processing credit card transactions.
function gm_authorizenet_charge($order_id, $amount, $data) {
  // Load the order.
  $order = uc_order_load($order_id);

  // Perform the appropriate action based on the transaction type.
  switch ($data['txn_type']) {
    // Reference transactions are handled through Authorize.Net's CIM.
    case UC_CREDIT_REFERENCE_TXN:
      return _gm_authorizenet_cim_profile_charge($order, $amount, $data);

    // Set a reference only.
    case UC_CREDIT_REFERENCE_SET:
      // Return the error message if this failed.
      if ($message = _gm_authorizenet_cim_profile_create($order, $data)) {
        return array('success' => FALSE, 'message' => $message);
      }
      else {
        return array('success' => TRUE, 'message' => t('New customer profile created successfully at Authorize.Net.'));
      }

    // Accommodate all other transaction types.
    default:
      return _gm_authorizenet_charge($order, $amount, $data);
  }
}

/**
 * Create a CIM profile using an order's data.
 */
function _gm_authorizenet_cim_profile_create($order, $data) {
  $server = $data['config']['gm_authnet_cim_mode'];

  // Help build the request.
  $request = _gm_authorizenet_cim_profile_create_request($order);

  // Unset the user email if config says otherwise.
  if ($data['config']['gm_authnet_hide_emails'] == 1) {
    unset($request['profile']['email']);
  }

  // Request a profile from auth.net.
  $xml = _gm_authorizenet_xml_api_wrapper('createCustomerProfileRequest', _gm_authorizenet_array_to_xml($request), $data['config']);

  // Parse the response.
  $response = _gm_authorizenet_cim_parse_response(gm_authorizenet_xml_api($server, $xml));
  if ($response['resultCode'] == 'Error') {
    uc_order_comment_save($order->order_id, 0, t('Authorize.Net: Creating CIM profile failed.<br />@error - @text', array('@error' => $response['code'], '@text' => $response['text'])), 'admin');
    return $response['text'];
  }
  else {
    uc_order_comment_save($order->order_id, 0, t('Authorize.Net: CIM profile created - @id', array('@id' => $response['customerProfileId'])));
  }

  // Save the new credit reference to the db.
  $order->data = uc_credit_log_reference($order->order_id, $response['customerProfileId'], $order->payment_details['cc_number']);

  return '';
}

/**
 * Helper to create the CIM profile creation request.
 */
function _gm_authorizenet_cim_profile_create_request($order) {
  return array(
    'refId' => substr($order->order_id .'-'. time(), 0, 20),
    'profile' => array(
      'merchantCustomerId' => substr($order->uid, 0, 20),
      'description' => substr(t('Order @order taking place at @date', array('@order' => $order->order_id, '@date' => format_date(time()))), 0, 255),
      'email' => substr($order->primary_email, 0, 255),
      'paymentProfiles' => array(
        'billTo' => _gm_authorize_cim_xml_billto($order),
        'payment' => array(
          'creditCard' => array(
            'cardNumber' => $order->payment_details['cc_number'],
            'expirationDate' => $order->payment_details['cc_exp_year'] .'-'. str_pad($order->payment_details['cc_exp_month'], 2, '0', STR_PAD_LEFT),
          ),
        ),
      ),
      'shipToList' => _gm_authorize_cim_xml_shipto($order),
    ),
  );
}

/**
 * Use a reference to charge to a CIM profile.
 */
function _gm_authorizenet_cim_profile_charge($order, $amount, $data) {
  global $user;
  $server = $data['config']['gm_authnet_cim_mode'];

  // Help build the request.
  $request = _gm_authorizenet_cim_profile_charge_request($order, $amount, $data);

  // Check error state.
  if (array_key_exists('errorCode', $request)) {
    $comment[] = $request['text'];
    $result = array(
      'success' => FALSE,
    );
  }

  // Request went off smooth.
  else {

    // Request a profile from auth.net.
    $xml = _gm_authorizenet_xml_api_wrapper('createCustomerProfileTransactionRequest', _gm_authorizenet_array_to_xml($request), $data['config']);

    // Parse the response.
    $response = _gm_authorizenet_cim_parse_response(gm_authorizenet_xml_api($server, $xml));

    // Error state.
    if ($response['resultCode'] == 'Error') {
      $result = array(
        'success' => FALSE,
      );
      $comment[] = '('. $response['resultCode'] .': '. $response['text'] .')';
    }

    // Transaction succeeded.
    else {
      $direct_response = explode(',', $response['directResponse']);
      $result = array(
        'success' => TRUE,
        'data' => array('module' => 'uc_authorizenet', 'txn_type' => $direct_response[11], 'txn_id' => $direct_response[6], 'auth_code' => $direct_response[4]),
      );

      // Build info message.
      $types = uc_credit_transaction_types();
      $context = array(
        'revision' => 'formatted-original',
        'type' => 'amount',
      );
      $comment[] = t('<b>@type:</b> @amount', array('@type' => $types[$data['txn_type']], '@amount' => uc_price($amount, $context)));

      // Save a comment to the order.
      uc_order_comment_save($order->order_id, $user->uid, implode('<br />', $comment), 'admin');
    }
  }

  // Build the response to the payment gateway API.
  return $result + array(
    'comment' => implode(', ', $comment),
    'message' => implode('<br />', $comment),
    'uid' => $user->uid,
  );
}

/**
 * Helper for building the request for a CIM profile charge.
 */
function _gm_authorizenet_cim_profile_charge_request($order, $amount, $data) {
  // Request per: http://www.authorize.net/support/CIM_XML_guide.pdf, using createCustomerProfileTransactionRequest
  $profile = _gm_authorizenet_cim_profile_get($order, $data['ref_id'], $data['config']);
  if ($profile['resultCode'] == 'Error') {
    return $profile;
  }
  else {
    $trans_array = array(
      'refId' => substr($order->order_id .'-'. time(), 0, 20),
      'transaction' => array(
        'profileTransAuthCapture' => array(
          'amount' => $amount,
          'customerProfileId' => $profile['customerProfileId'],
          'customerPaymentProfileId' => $profile['customerPaymentProfileId'],
          'order' => array(
            'invoiceNumber' => $order->order_id,
          ),
        ),
      ),
    );
    // Set the merchant defined fields if available out of $data.
    $extra_merchant_fields = array();
    for ($i=1; $i<6; $i++) {
      // If both halves of the pair are set.
      if (isset($data['config']['gm_authnet_webform_field_' . $i]) && isset($data['config']['gm_authnet_authorize_field_' . $i])) {
        if (isset($order->data[ $data['config']['gm_authnet_webform_field_' . $i] ])) {
          // However the data is mapped, we find the webform value. TODO come back to this.
          $extra_merchant_fields[ $data['config']['gm_authnet_authorize_field_' . $i] ] = $order->data[ $data['config']['gm_authnet_webform_field_' . $i] ];
        }
      }
    }
    if (!empty($extra_merchant_fields)) {
      $trans_array['extraOptions'] = $extra_merchant_fields;
    }
    return $trans_array;
  }
}

/**
 * Get a CIM profile stored at Authorize.Net.
 */
function _gm_authorizenet_cim_profile_get($order, $profile_id, $config) {
  $server = $config['gm_authnet_cim_mode'];
  $request = array(
    'customerProfileId' => $profile_id,
  );

  // Request a profile from auth.net.
  $xml = _gm_authorizenet_xml_api_wrapper('getCustomerProfileRequest', _gm_authorizenet_array_to_xml($request), $config);

  // Parse the response.
  $response = _gm_authorizenet_cim_parse_response(gm_authorizenet_xml_api($server, $xml));

  return $response;
}

/**
 * Get a CIM payment profile stored at auth.net.
 */
function _gm_authorizenet_cim_payment_profile_get($order, $profile_id, $payment_profile_id, $config) {
  $server = $config['gm_authnet_cim_mode'];
  $request = array(
    'customerProfileId' => $profile_id,
  );

  // Request a profile from auth.net.
  $xml = _gm_authorizenet_xml_api_wrapper('getCustomerPaymentProfileRequest', _gm_authorizenet_array_to_xml($request), $config);
  // Parse the response.
  $response = _gm_authorizenet_cim_parse_response(gm_authorizenet_xml_api($server, $xml));
  return $response['resultCode'] == 'Error' ? FALSE : $response;
}


/**
 * Implements fundraiser_add_order_fields().
 * Adds field data to $order->data, return in the format array($field1 => $value1, $field2 => $value2, etc).
 */
function gm_authorizenet_fundraiser_add_order_fields($fundraiser_fields) {
  $return_fields = array();
  // For each field, save it by name into data for pickup at authorize.
  if (isset($fundraiser_fields['node']->gateway)) {
  $config = gateway_manager_gateway_info($fundraiser_fields['node']->gateway);
    // Set the merchant defined fields if available out of $data.
    for ($i=1; $i<6; $i++) {
      // If both halves of the pair are set.
      if (isset($config['config']['gm_authnet_webform_field_' . $i]) && isset($config['config']['gm_authnet_authorize_field_' . $i])) {
        if (isset($fundraiser_fields[ $config['config']['gm_authnet_webform_field_' . $i] ] )) {
          // However the data is mapped, we find the webform value. TODO come back to this.
          $return_fields[ $config['config']['gm_authnet_webform_field_' . $i] ] = $fundraiser_fields[ $config['config']['gm_authnet_webform_field_' . $i] ];
        }
      }
    }
  }
  return $return_fields;
}

/**
 * Handles authorizations and captures through AIM at Authorize.Net
 */
function _gm_authorizenet_charge($order, $amount, $data) {
  global $user;

  // Build a description of the order for logging in Auth.Net.
  $description = array();
  foreach ((array) $order->products as $product) {
    $description[] = $product->qty .'x '. $product->model;
  }
  $billing_country = uc_get_country_data(array('country_id' => $order->billing_country));
  $delivery_country = uc_get_country_data(array('country_id' => $order->delivery_country));
  $context = array(
    'revision' => 'formatted-original',
    'type' => 'amount',
  );
  $options = array(
    'sign' => FALSE,
    'thou' => FALSE,
    'dec' => '.',
  );

  // Build the POST data for the transaction.
  $submit_data = array(
    // Merchant Information
    'x_login' => $data['config']['gm_authnet_api_login_id'],
    'x_tran_key' => $data['config']['gm_authnet_api_transaction_key'],

    // Transaction Information
    'x_version' => '3.1',
    'x_type' => _gm_authorizenet_txn_map($data['txn_type']),
    // 'x_method' => $order->payment_method == 'credit' ? 'CC' : 'ECHECK',
    'x_method' => 'CC',
    // 'x_recurring_billing' => 'FALSE',
    'x_amount' => uc_price($amount, $context, $options),
    'x_card_num' => $order->payment_details['cc_number'],
    'x_exp_date' => $order->payment_details['cc_exp_month'] .'/'. $order->payment_details['cc_exp_year'],
    'x_card_code' => $order->payment_details['cc_cvv'],
    // 'x_trans_id' => '',
    // 'x_auth_code' => '',
    'x_test_request' => $data['config']['gm_authnet_aim_txn_mode'] == 'live_test' ? 'TRUE' : 'FALSE',
    'x_duplicate_window' => $data['config']['gm_authnet_duplicate_window'],

    // Order Information
    'x_invoice_num' => $order->order_id,
    'x_description' => substr(implode(', ', $description), 0, 255),

    // Customer Information
    'x_first_name' => substr($order->billing_first_name, 0, 50),
    'x_last_name' => substr($order->billing_last_name, 0, 50),
    'x_company' => substr($order->billing_company, 0, 50),
    'x_address' => substr($order->billing_street1, 0, 60),
    'x_city' => substr($order->billing_city, 0, 40),
    'x_state' => substr(uc_get_zone_code($order->billing_zone), 0, 40),
    'x_zip' => substr($order->billing_postal_code, 0, 20),
    'x_country' => !$billing_country ? '' : $billing_country[0]['country_iso_code_2'],
    'x_phone' => substr($order->billing_phone, 0, 25),
    // 'x_fax' => substr('', 0, 25),
    'x_cust_id' => substr($order->uid, 0, 20),
    'x_customer_ip' => substr(ip_address(), 0, 15),

    // Shipping Information
    'x_ship_to_first_name' => substr($order->delivery_first_name, 0, 50),
    'x_ship_to_last_name' => substr($order->delivery_last_name, 0, 50),
    'x_ship_to_company' => substr($order->delivery_company, 0, 50),
    'x_ship_to_address' => substr($order->delivery_street1, 0, 60),
    'x_ship_to_city' => substr($order->delivery_city, 0, 40),
    'x_ship_to_state' => substr(uc_get_zone_code($order->delivery_zone), 0, 40),
    'x_ship_to_zip' => substr($order->delivery_postal_code, 0, 20),
    'x_ship_to_country' => !$delivery_country ? '' : $delivery_country[0]['country_iso_code_2'],

    // Extra Information
    'x_delim_data' => 'TRUE',
    'x_delim_char' => '|',
    'x_encap_char' => '"',
    'x_relay_response' => 'FALSE',
    'x_email_customer' => $data['config']['gm_authnet_aim_email_customer'] ? 'TRUE' : 'FALSE',
  );

  // Set the user email if config says is ok.
  if (!($data['config']['gm_authnet_hide_emails'] == 1) ) {
    $submit_data['x_email'] = substr($order->primary_email, 0, 255);
  }

  // Set the merchant defined fields if available out of $data.
  for ($i=1; $i<6; $i++) {
    // If both halves of the pair are set.
    if (isset($data['config']['gm_authnet_webform_field_' . $i]) && isset($data['config']['gm_authnet_authorize_field_' . $i])) {
      if (isset($order->data[ $data['config']['gm_authnet_webform_field_' . $i] ])) {
        // However the data is mapped, we find the webform value. TODO come back to this.
        $submit_data[ $data['config']['gm_authnet_authorize_field_' . $i] ] = $order->data[ $data['config']['gm_authnet_webform_field_' . $i] ];
      }
    }
  }

  // Set the transaction id as needed.
  if (in_array($data['txn_type'], array(UC_CREDIT_PRIOR_AUTH_CAPTURE, UC_CREDIT_CREDIT, UC_CREDIT_VOID))) {
    $submit_data['x_trans_id'] = $data['auth_id'];
  }

  // Determine the correct URL based on the transaction mode.
  if ($data['config']['gm_authnet_aim_txn_mode'] == 'developer_test') {
    $post_url = $data['config']['gm_authnet_api_test_gateway_url'];
  }
  else {
    $post_url = $data['config']['gm_authnet_api_live_gateway_url'];
  }

  // Translate the data array into a string we can POST.
  $post_fields = array();
  foreach ($submit_data as $key => $value) {
    $post_fields[] = $key .'='. urlencode($value);
  }

  // Setup the cURL request.
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $post_url);
  curl_setopt($ch, CURLOPT_VERBOSE, 0);
  curl_setopt($ch, CURLOPT_POST, 1);
  curl_setopt($ch, CURLOPT_POSTFIELDS, implode('&', $post_fields));
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
  curl_setopt($ch, CURLOPT_NOPROGRESS, 1);
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 0);
  $result = curl_exec($ch);

  // Log any errors to the watchdog.
  if ($error = curl_error($ch)) {
    watchdog('uc_authorizenet', 'cURL error: @error', array('@error' => $error), WATCHDOG_ERROR);
    return array('success' => FALSE);
  }
  curl_close($ch);

  $response = explode('|', $result);

  if ($data['config']['gm_authnet_response_debug']) {
    watchdog('gm_authorizenet', 'Debug response: !data', array('!data' => '<pre>'. check_plain(print_r($response, TRUE)) .'</pre>'));
  }

  // Trim off the encapsulating character from the results.
  for ($i = 0; $i < count($response); $i++) {
    $response[$i] = substr($response[$i], 1, drupal_strlen($response[$i]) - 2);
  }

  /**
   * Response key index:
   * 0 = Response Code
   * 2 = Response Reason Code
   * 3 = Response Reason Text
   * 4 = Authorization Code
   * 5 = Address Verification Service (AVS) Response
   * 6 = Transaction ID; needed for CREDIT, PRIOR_AUTH_CAPTURE, and VOID transactions.
   * 9 = Amount
   * 11 = Transaction Type
   * 32 = Tax Amount Charged
   * 37 = Transaction Response MD5 Hash
   * 38 = Card Code (CVV) Response
   */

  // If we didn't get an approval response code...
  if ($response[0] != '1') {
    // Determine what kind of error happened
    $response_code = $response[2];
    $error_type = 'billing';
    /**
     * Check the error code from authorize.net to determine if the error was a
     * problem with the gateway (invalid credentials, duplicate transaction,
     * etc) or a billing error (incorrect credit card number or CVV, etc).
     *
     * Unfortunately, the error codes aren't in any particular order, so simple
     * billing errors are mixed in with more difficult-to-remedy errors,
     * necessitating this complex logic to determine the error type.
     *
     * Error codes can be found here, under Transaction Response > Response Code
     * Details
     * http://developer.authorize.net/guides/DPM/wwhelp/wwhimpl/js/html/wwhelp.htm
     */
    if (($response_code >= AUTH_NET_ERROR_DUPLICATE_TRANSACTION
          && $response_code != AUTH_NET_ERROR_CC_NUMBER_INVALID
          && $response_code <= AUTH_NET_ERROR_INVALID_METHOD)
        || ($response_code >= AUTH_NET_ERROR_INVALID_FORM_TYPE && $response_code != AUTH_NET_ERROR_AVS_MISMATCH)) {
      $error_type = 'gateway';
    }

    // Fail the charge with the reason text in the decline message.
    $result = array(
      'success' => FALSE,
      'message' => t('Credit card payment declined: @message', array('@message' => $response[3])),
      'uid' => $user->uid,
      'error type' => $error_type,
    );
  }
  else {
    // Build a message for display and comments in the payments table.
    $message = t('Type: @type<br />ID: @id', array('@type' => _gm_authorizenet_txn_type($response[11]), '@id' => $response[6]));
    $result = array(
      'success' => TRUE,
      'comment' => $message,
      'message' => $message,
      'data' => array('module' => 'gm_authorizenet', 'txn_type' => $response[11], 'txn_id' => $response[6], 'auth_code' => $response[4]),
      'uid' => $user->uid,
    );

    // If this was an authorization only transaction...
    if ($data['txn_type'] == UC_CREDIT_AUTH_ONLY) {
      // Log the authorization to the order.
      uc_credit_log_authorization($order->order_id, $response[6], $amount);
    }
    elseif ($data['txn_type'] == UC_CREDIT_PRIOR_AUTH_CAPTURE) {
      uc_credit_log_prior_auth_capture($order->order_id, $data['auth_id']);
    }

    // Create a transaction reference if specified in the payment gateway
    // settings and this is an appropriate transaction type.
    if ($data['config']['gm_authnet_cim_profile'] && in_array($data['txn_type'], array(UC_CREDIT_AUTH_ONLY, UC_CREDIT_AUTH_CAPTURE))) {
      // Ignore the returned message for now; that will appear in the comments.
      _gm_authorizenet_cim_profile_create($order, $data);
    }
  }

  // Don't log this as a payment money wasn't actually captured.
  if (in_array($data['txn_type'], array(UC_CREDIT_AUTH_ONLY))) {
    $result['log_payment'] = FALSE;
  }

  // Build an admin order comment.
  $context = array(
    'revision' => 'formatted-original',
    'type' => 'amount',
  );
  $comment = t('<b>@type</b><br /><b>@status:</b> @message<br />Amount: @amount<br />AVS response: @avs',
    array('@type' => _gm_authorizenet_txn_type($response[11]), '@status' => $result['success'] ? t('ACCEPTED') : t('REJECTED'),
      '@message' => $response[3], '@amount' => uc_price($response[9], $context), '@avs' => _gm_authorizenet_avs($response[5])));

  // Add the CVV response if enabled.
  if (variable_get('uc_credit_cvv_enabled', TRUE)) {
    $comment .= '<br />'. t('CVV match: @cvv', array('@cvv' => _gm_authorizenet_cvv($response[38])));
  }

  // Save the comment to the order.
  uc_order_comment_save($order->order_id, $user->uid, $comment, 'admin');

  return $result;
}

/**
 * Sends an XML API Request to Authorize.Net.
 *
 * @param $server
 *   The name of the server to send a request to - 'production' or 'developer'.
 * @param $xml
 *   The XML to send to Authorize.Net.
 * @param $callback
 *   The name of the function that should process the response.
 * @return
 *   TRUE or FALSE indicating the success of the API request.
 */
function gm_authorizenet_xml_api($server, $xml) {
  if ($server == 'production') {
    $post_url = 'https://api.authorize.net/xml/v1/request.api';
  }
  elseif ($server == 'developer') {
    $post_url = 'https://apitest.authorize.net/xml/v1/request.api';
  }
  else {
    return FALSE;
  }

  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $post_url);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_HTTPHEADER, Array("Content-Type: text/xml"));
  curl_setopt($ch, CURLOPT_HEADER, 1);
  curl_setopt($ch, CURLOPT_POSTFIELDS, $xml);
  curl_setopt($ch, CURLOPT_POST, 1);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
  $response = curl_exec($ch);

  // Log any errors to the watchdog.
  if ($error = curl_error($ch)) {
    watchdog('gm_authorizenet', 'cURL error: @error', array('@error' => $error), WATCHDOG_ERROR);
    return FALSE;
  }
  curl_close($ch);

  return $response;
}

/**
 * Wraps XML API request child elements in the request element and includes the
 *   merchant authentication information.
 */
function _gm_authorizenet_xml_api_wrapper($request, $xml, $config) {
  return '<?xml version="1.0" encoding="utf-8"?><'. $request
        .' xmlns="AnetApi/xml/v1/schema/AnetApiSchema.xsd"><merchantAuthentication>'
        .'<name>'. $config['gm_authnet_api_login_id'] .'</name>'
        .'<transactionKey>'. $config['gm_authnet_api_transaction_key']
        .'</transactionKey></merchantAuthentication>'. $xml .'</'. $request .'>';
}

// Converts a hierarchical array of elements into an XML string.
function _gm_authorizenet_array_to_xml($data) {
  $xml = '';
  // Loop through the elements in the data array.
  foreach ($data as $element => $contents) {
    if (is_array($contents)) {
      if ($element == 'extraOptions') {
        /* Per docs for CIM, XML, this is the odd man out. :
            Value: Information in name/value pair format that does not exist within CIM, such as customer IP address, etc.
            Optional Format: String
            Notes: For a complete list of the transaction variable names available, review the AIM Implementation Guide
            located at http://www.authorize.net/support/AIM_ guide.pdf.
            Ex:
            <extraOptions>
              <![CDATA[x_customer_ip=100.0.0.1&x_authentication_indicator=5]]>
            </ extraOptions>
        */
        $CDATA = array();
        foreach ($contents as $key => $value) {
          // extraOptions doesn't do nested, so if something has been nested - ignore it.
          if (!is_array($value)) {
            $CDATA[] .= trim(htmlspecialchars($key)) . '=' . trim(htmlspecialchars($value));
          }
        }
        $CDATA = implode('&', $CDATA);
        $xml .= '<extraOptions><![CDATA['. $CDATA .']]></extraOptions>';
      }
      else {
        // Render the element with its child elements.
        $xml .= '<'. $element .'>'. _gm_authorizenet_array_to_xml($contents) .'</'. $element .'>';
      }
    }
    else {
      // Render the element with its contents.
      $xml .= '<'. $element .'>'. htmlspecialchars($contents) .'</'. $element .'>';
    }
  }
  return $xml;
}

// Returns the message text for an AVS response code.
function _gm_authorizenet_avs($code) {
  $text = $code .' - ';

  switch ($code) {
    case 'A':
      $text .= t('Address (Street) matches, ZIP does not');
      break;
    case 'B':
      $text .= t('Address information not provided for AVS check');
      break;
    case 'E':
      $text .= t('AVS error');
      break;
    case 'G':
      $text .= t('Non-U.S. Card Issuing Bank');
      break;
    case 'N':
      $text .= t('No Match on Address (Street) or ZIP');
      break;
    case 'P':
      $text .= t('AVS not applicable for this transaction');
      break;
    case 'R':
      $text .= t('Retry – System unavailable or timed out');
      break;
    case 'S':
      $text .= t('Service not supported by issuer');
      break;
    case 'U':
      $text .= t('Address information is unavailable');
      break;
    case 'W':
      $text .= t('Nine digit ZIP matches, Address (Street) does not');
      break;
    case 'X':
      $text .= t('Address (Street) and nine digit ZIP match');
      break;
    case 'Y':
      $text .= t('Address (Street) and five digit ZIP match');
      break;
    case 'Z':
      $text .= t('Five digit ZIP matches, Address (Street) does not');
      break;
  }

  return $text;
}

// Returns the message text for a CVV match.
function _gm_authorizenet_cvv($code) {
  $text = $code .' - ';

  switch ($code) {
    case 'M':
      $text .= t('Match');
      break;
    case 'N':
      $text .= t('No Match');
      break;
    case 'P':
      $text .= t('Not Processed');
      break;
    case 'S':
      $text .= t('Should have been present');
      break;
    case 'U':
      $text .= t('Issuer unable to process request');
      break;
  }

  return $text;
}

// Returns the title of the transaction type.
function _gm_authorizenet_txn_type($type) {
  switch (drupal_strtoupper($type)) {
    case 'AUTH_CAPTURE':
      return t('Authorization and capture');
    case 'AUTH_ONLY':
      return t('Authorization only');
    case 'PRIOR_AUTH_CAPTURE':
      return t('Prior authorization capture');
    case 'CAPTURE_ONLY':
      return t('Capture only');
    case 'CREDIT':
      return t('Credit');
    case 'VOID':
      return t('Void');
  }
}

// Returns the Auth.Net transaction type corresponding to a UC type.
function _gm_authorizenet_txn_map($type) {
  switch ($type) {
    case UC_CREDIT_AUTH_ONLY:
      return 'AUTH_ONLY';
    case UC_CREDIT_PRIOR_AUTH_CAPTURE:
      return 'PRIOR_AUTH_CAPTURE';
    case UC_CREDIT_AUTH_CAPTURE:
      return 'AUTH_CAPTURE';
    case UC_CREDIT_CREDIT:
      return 'CREDIT';
    case UC_CREDIT_VOID:
      return 'VOID';
  }
}

/**
 * Map an order's billing information to an array for later XML conversion.
 */
function _gm_authorize_cim_xml_billto($order) {
  $billing_country = uc_get_country_data(array('country_id' => $order->billing_country));
  return array(
    'firstName' => substr($order->billing_first_name, 0, 50),
    'lastName' => substr($order->billing_last_name, 0, 50),
    'company' => substr($order->billing_company, 0, 50),
    'address' => substr($order->billing_street1, 0, 60),
    'city' => substr($order->billing_city, 0, 40),
    'state' => substr(uc_get_zone_code($order->billing_zone), 0, 2),
    'zip' => substr($order->billing_postal_code, 0, 20),
    'country' => !$billing_country ? '' : $billing_country[0]['country_iso_code_2'],
  );
}

/**
 * Map an order's shipping information to an array for later XML conversion.
 */
function _gm_authorize_cim_xml_shipto($order) {
  $delivery_country = uc_get_country_data(array('country_id' => $order->delivery_country));
  return array(
    'firstName' => substr($order->delivery_first_name, 0, 50),
    'lastName' => substr($order->delivery_last_name, 0, 50),
    'company' => substr($order->delivery_company, 0, 50),
    'address' => substr($order->delivery_street1, 0, 60),
    'city' => substr($order->delivery_city, 0, 40),
    'state' => substr(uc_get_zone_code($order->delivery_zone), 0, 2),
    'zip' => substr($order->delivery_postal_code, 0, 20),
    'country' => !$delivery_country ? '' : $delivery_country[0]['country_iso_code_2'],
  );
}

/**
 * Parse an Authorize.Net XML CIM API response.
 */
function _gm_authorizenet_cim_parse_response($content) {
  // Find the elements in the XML and build the return array.
  $data = array(
    'refId' => _gm_authorizenet_substr_between($content, 'refId'),
    'resultCode' => _gm_authorizenet_substr_between($content, 'resultCode'),
    'code' => _gm_authorizenet_substr_between($content, 'code'),
    'text' => _gm_authorizenet_substr_between($content, 'text'),
    'customerProfileId' => _gm_authorizenet_substr_between($content, 'customerProfileId'),
    'directResponse' => _gm_authorizenet_substr_between($content, 'directResponse'),
    'customerPaymentProfileId' => _gm_authorizenet_substr_between($content, 'customerPaymentProfileId'),
    'customerAddressId' => _gm_authorizenet_substr_between($content, 'customerAddressId'),
  );

  return $data;
}

// Parse an Authorize.Net XML API response; from sample PHP for ARB.
function _gm_authorizenet_arb_parse_response($content) {
  // Find the elements in the XML and build the return array.
  $data = array(
    'refId' => _gm_authorizenet_substr_between($content, 'refId'),
    'resultCode' => _gm_authorizenet_substr_between($content, 'resultCode'),
    'code' => _gm_authorizenet_substr_between($content, 'code'),
    'text' => _gm_authorizenet_substr_between($content, 'text'),
    'subscriptionId' => _gm_authorizenet_substr_between($content, 'subscriptionId'),
  );

  return $data;
}

// Helper function for parsing responses; adapted from sample PHP for ARB.
function _gm_authorizenet_substr_between($string, $element) {
  $open = '<'. $element .'>';
  $close = '</'. $element .'>';

  // Fail if we can't find the open or close tag for the element.
  if (strpos($string, $open) === FALSE || strpos($string, $close) === FALSE) {
    return FALSE;
  }

  $start = strpos($string, $open) + drupal_strlen($open);
  $end = strpos($string, $close);

  return substr($string, $start, $end - $start);
}

// Decrypts the login data for using Auth.Net APIs.
function _gm_authorizenet_login_data() {
  static $data;

  if (!empty($data)) {
    return $data;
  }

  $md5_hash = variable_get('uc_authnet_md5_hash', '');

  // If CC encryption has been configured properly.
  if ($key = uc_credit_encryption_key()) {
    // Setup our encryption object.
    $crypt = new uc_encryption_class;

    // Decrypt the MD5 Hash.
    if (!empty($md5_hash)) {
      $md5_hash = $crypt->decrypt($key, $md5_hash);
    }

    // Store any errors.
    uc_store_encryption_errors($crypt, 'gm_authorizenet');
  }

  $data = array(
    'md5_hash' => $md5_hash,
  );

  return $data;
}

/**
 * Issue a refund
 */
function gm_authorizenet_refund($order_id, $amount, $data) {
  $amount = (float)$amount;
  // Make the charge amount negative
  if ($amount > 0) {
    $amount = $amount * -1;
  }

  if ($order_id > 0) {
    $payment_details = db_fetch_object(db_query('SELECT gateway, txn_id FROM {fundraiser_webform_order} WHERE order_id = %d', array($order_id)));

    // Set the transaction type to credit, and the ID of the previous charge to refund against
    $data['txn_type'] = UC_CREDIT_CREDIT;
    $data['auth_id'] = $payment_details->txn_id;

    return gm_authorizenet_charge($order_id, $amount, $data);
  }
  return array();
}