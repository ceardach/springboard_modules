<?php

/**
 * @file
 * Provides batch processing functionality for Salesforce integration.
 */

/**
 * @defgroup salesforce_queue_var_default Default variables for Salesforce Queue
 * @{
 */

// Maximum items that can be claimed from the queue.
define('SALESFORCE_QUEUE_MAX_ITEMS_DEFAULT', 1000);

// Length of time the queue can be leased to a process.
define('SALESFORCE_QUEUE_LEASE_TIME_DEFAULT', 3600);

// Maximum retries an item will go through before moving to the 'fail' queue.
define('SALESFORCE_QUEUE_MAX_RETRIES_DEFAULT', 5);

// Minimum frequency the processor can be run when cron is run.
define('SALESFORCE_QUEUE_CRON_FREQUENCY_DEFAULT', 60);

/**
 * @} salesforce_queue_var_default
 */


/**
 * @defgroup salesforce_queue_processor_statuses Statuses of queue processor
 * @{
 * The processor will return one of the following statuses once it completes its
 * processing of a batch of queue items.
 */

// The process completed as expected.
define('SALESFORCE_QUEUE_PROCESS_COMPLETE', 10);

// No items were retreived from the queue.
define('SALESFORCE_QUEUE_PROCESS_NO_ITEMS', 1);

// The process has never been initiated.
define('SALESFORCE_QUEUE_PROCESS_NOT_STARTED', 0);

// Items cannot be claimed because the queue is leased.
define('SALESFORCE_QUEUE_PROCESS_FAIL_QUEUE_LEASED', -1);

// The lease expired before all batches could be completed.
define('SALESFORCE_QUEUE_PROCESS_FAIL_LEASE_EXPIRED', -2);

// Although items were claimed from the queue, none of them passed validation.
define('SALESFORCE_QUEUE_PROCESS_FAIL_NO_VALID_ITEMS', -3);

// Cannnot connect to Salesforce.
define('SALESFORCE_QUEUE_PROCESS_FAIL_CONNECT', -9);

// Items cannot be claimed for an unknown reason.
define('SALESFORCE_QUEUE_PROCESS_FAIL_CLAIM_ITEMS', -10);

/**
 * @} salesforce_queue_processor_statuses
 */


/**
 * @addtogroup salesforce_sync_item_fail_responses
 * @{
 */

// The item could not reach processing because the lease on the queue expired.
define('SALESFORCE_QUEUE_PROCESS_ITEM_FAIL_LEASE_EXPIRED', 'Lease expired before batch could be processed.');

// Item failed validation. It does not have the proper properties nessisary to
// be sent to Salesforce for the operation associated with it.
define('SALESFORCE_QUEUE_PROCESS_ITEM_FAIL_NOT_VALID', 'Item failed validation.');

/**
 * @} salesforce_sync_item_fail_responses
 */

/**
 * Implements hook_entity_info().
 */
function salesforce_queue_entity_info() {
  return array(
    'salesforce_queue_item' => array(
      'label' => t('Salesforce queue item'),
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'base table' => 'salesforce_queue',
      'entity keys' => array(
        'id' => 'item_id',
      ),
      'fieldable' => FALSE,
      'exportable' => FALSE,
      'module' => 'salesforce_queue',
      'deletion callback' => 'salesforce_queue_item_entity_delete',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function salesforce_queue_menu() {
  $items['admin/config/services/salesforce/salesforce-sync/salesforce-queue'] = array(
    'title' => 'Queue',
    'description' => 'Configuration settings for the Salesforce queue.',
    'page callback' => 'salesforce_queue_admin_page',
    'access arguments' => array('administer salesforce queue'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/salesforce_queue.admin.inc',
  );

  $items['admin/config/services/salesforce/salesforce-sync/salesforce-queue-object-verify'] = array(
    'title' => 'Debug',
    'description' => 'Utility for verifying the format of Salesforce objects.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('salesforce_queue_object_verification_form'),
    'access arguments' => array('administer salesforce sync'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/salesforce_queue.utility.inc',
    'weight' => 10,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function salesforce_queue_permission() {
  return array(
    'administer salesforce queue' => array(
      'description' => t('Configure settings for the Salesforce queue.'),
      'title' => t('Configure Salesforce queue'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_theme().
 */
function salesforce_queue_theme() {
  return array(
    'salesforce_queue_admin_form' => array(
      'render element' => 'form',
      'file' => 'includes/salesforce_queue.admin.inc',
    ),
  );
}

/**
 * Implements hook_node_delete().
 */
function salesforce_queue_node_delete($node) {
  // Dequeue all queue items related to this node.
  db_delete('salesforce_queue')
    ->condition('drupal_id', $node->nid)
    ->condition('module', 'node')
    ->condition('delta', $node->type)
    ->execute();
}

/**
 * Implements hook_action_info().
 */
function salesforce_queue_action_info() {
  return array(
    'salesforce_queue_salesforce_queue_item_requeue_action' => array(
      'description' => t('Requeue'),
      'label' => t('Requeue failed item'),
      'type' => 'salesforce_queue_item',
      'configurable' => FALSE,
      'triggers' => array('any'),
    ),
  );
}

/**
 * Wrapper to load a SalesforceQueue object.
 *
 * @param string $queue_name
 *   Name of the queue to load.  The default queues are 'new', 'retry' and
 *   'fail', but any number of other queues can be created.  Use 'all' to have
 *   access to the multi-queue manager.  If no queue name is provided, it will
 *   default to 'all'.
 *
 * @return SalesforceQueue
 *   SalesforceQueue object
 */
function salesforce_queue_load($queue_name = 'all') {
  return SalesforceQueue::get($queue_name);
}

/**
 * Wrapper to load SalesforceQueueProcessor object for a given SalesforceQueue.
 *
 * @param mixed $queue
 *   Provide a string of the name of the queue to load a processor for, or the
 *   SalesforceQueue object itself.
 *
 * @return SalesforceQueueProcessor
 *   Processor for the given SalesforceQueue.
 */
function salesforce_queue_load_processor($queue = '') {
  if (is_string($queue)) {
    $queue = salesforce_queue_load($queue);
  }
  return SalesforceQueueProcessor::get($queue);
}


/**
 * @name salesforce_queue_process  Group for behaviors processing the queue
 * @{
 */

/**
 * Processes the data in the Salesforce queue.
 */
function salesforce_queue_process_queue($queue_name = 'all') {
  $processor = salesforce_queue_load_processor($queue_name);
  return $processor->process();
}

/**
 * Implements hook_cron().
 */
function salesforce_queue_cron() {
  // Limit the running of the processor to a configured frequency.
  $cron_frequency = variable_get('salesforce_queue_cron_frequency', SALESFORCE_QUEUE_CRON_FREQUENCY_DEFAULT);
  $cron_last = variable_get('salesforce_queue_cron_last', 0);
  if (($cron_last + $cron_frequency) < REQUEST_TIME) {
    salesforce_queue_process_queue();
    // Set cron_last after process has completed.
    variable_set('salesforce_queue_cron_last', time());
  }
}

/**
 * Implements hook_salesforce_sync_pass_item().
 */
function salesforce_queue_salesforce_sync_pass_item($item, $result) {
  if (isset($item->queue) && !empty($item->queue)) {
    // Remove successful items from the queue.
    $queue = salesforce_queue_load();
    $queue->deleteItem($item);
  }
}

/**
 * Implements hook_salesforce_sync_fail_item().
 */
function salesforce_queue_salesforce_sync_fail_item($item, $result) {
  if (isset($item->queue) && isset($item->item_id) && !empty($item->queue) && !empty($item->item_id)) {
    // Mark items for retry if they have not exceeded the maximum.
    $max_retries = variable_get('salesforce_queue_max_retries', SALESFORCE_QUEUE_MAX_RETRIES_DEFAULT);
    if ($max_retries > $item->retries) {
      $item->retries++;
      $item->queue = 'retry';
    }
    // When the retry maximum is exceeded, put the item in the fail queue.
    else {
      $item->queue = 'fail';
    }
    $item->sobject = json_encode($item->sobject);
    drupal_write_record('salesforce_queue', $item, array('item_id'));
  }
}

/**
 * @} salesforce_queue_process
 */

/**
 * Delete function for the queue item entity.
 */
function salesforce_queue_item_entity_delete($item_id) {
  $items = entity_load('salesforce_queue_item', array($item_id));
  if (!empty($items[$item_id])) {
    $queue = salesforce_queue_load();
    $queue->deleteItem($items[$item_id]);
  }
}

/**
 * Requeue queue item action.
 */
function salesforce_queue_salesforce_queue_item_requeue_action($item) {
  // Only requeue items that have failed.
  if ($item->queue != 'fail') {
    return;
  }

  $queue = salesforce_queue_load();
  $queue->deleteItem($item);
  $new = array();
  $values = array(
    'drupal_id',
    'module',
    'delta',
    'object_type',
    'operation',
    'dedupe_field',
  );
  foreach ($values as $value) {
    $new[$value] = $item->{$value};
  }
  $new['sobject'] = json_decode($item->sobject);
  $queue = salesforce_queue_load();
  $queue->createItem($new);
}

/**
 * Helper to find queue names that have been used in the system.
 *
 * We really have no idea what queues have been used so we're just going to have
 * to search around.
 */
function salesforce_queue_get_queue_names() {
  // Defaults.
  $default_queues = array(
    'new' => 'new',
    'retry' => 'retry',
    'fail' => 'fail',
  );

  // Start with the current tracked queues.
  $tracked_queues = variable_get('salesforce_queue_tracked_queues', $default_queues);
  // Merge in the defaults in case someone messed with the variable outside of
  // the configuration page.
  $queue_names = $default_queues + $tracked_queues;

  // Find queue names from the variables table.
  $sql = "SELECT * FROM {variable} v WHERE v.name LIKE 'salesforce_queue_%_lease_expire'";
  $result = db_query($sql);
  foreach ($result as $record) {
    $name = trim(str_replace(array('salesforce_queue_', '_lease_expire'), array('', ''), $record->name));
    if ($name != 'all') {
      $queue_names[$name] = $name;
    }
  }

  // Find queue names from the queue.
  $result = db_select('salesforce_queue', 'q')
    ->fields('q', array('queue'))
    ->distinct()
    ->execute();
  foreach ($result as $record) {
    $queue_names[$record->queue] = $record->queue;
  }

  ksort($queue_names);
  return $queue_names;
}
