<?php

/**
 * @file
 * Provides a way to track which campaigns and market sources drive users to the
 * site.
 */

define('MARKET_SOURCE_VALUE_MAXLENGTH', 255);

/**
 * Implementation of hook_menu().
 */
function market_source_menu() {
  $items = array();

  $items['admin/settings/market-source'] = array(
    'title' => 'Market Source',
    'description' => 'Configuration settings for the Market Source module.',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('market_source_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'market_source.admin.inc',
  );
  $items['admin/settings/market-source/add-more-ahah'] = array(
    'title' => 'AHAH callback',
    'description' => 'AHAH callback for adding another row to the custom fields table.',
    'type' => MENU_CALLBACK,
    'page callback' => 'market_source_admin_add_more_ahah',
    'page arguments' => array(),
    'access arguments' => array('administer site configuration'),
    'file' => 'market_source.admin.inc',
  );

  return $items;
}

/**
 * Implementation of hook_init().
 */
function market_source_init() {
  // Add JavaScript to each page load.
  drupal_add_js(drupal_get_path('module', 'market_source') . '/jquery-cookie.js');
  drupal_add_js(drupal_get_path('module', 'market_source') . '/market_source.js');
  // Get cookie domain info.
  $market_source_cookie_domain = variable_get('market_source_cookie_domain', '');
  $ms_cookie_domain = '';
  // Per RFC 2109, cookie domains must contain at least one dot other than the
  // first. For hosts such as 'localhost' or IP Addresses we don't set a cookie domain.
  if (count(explode('.', $market_source_cookie_domain)) > 1 && !is_numeric(str_replace('.', '', $market_source_cookie_domain))) {
    $ms_cookie_domain = $market_source_cookie_domain;
  }
  // Add other variables to the JS settings array.
  drupal_add_js(array('market_source' => array(
    'qs_keys' => _market_source_build_qs_keys(),
    'maxlength' => MARKET_SOURCE_VALUE_MAXLENGTH,
    'cookie_domain' => $market_source_cookie_domain,
  )), 'setting');
}

/**
 * Implementation of hook_form_alter().
 */
function market_source_form_alter(&$form, $form_state, $form_id) {
  // Alter webforms.
  if (!empty($form['details']['nid']['#value']) && $form_id == 'webform_client_form_' . $form['details']['nid']['#value']) {
    // Add an #after_build callback for webforms.
    $form['#after_build'][] = 'market_source_webform_after_build';
    // Add validation callback for campaigns.
    if (variable_get('market_source_validate_sf_campaigns', FALSE)) {
      $form['#validate'][] = 'market_source_webform_cid_validate';
    }
  }
  elseif ($form_id == 'user_register') {
    // Add an #after_build callback for user registration form.
    $form['#after_build'][] = 'market_source_user_register_after_build';
    // Add validation callback for campaigns.
    if (variable_get('market_source_validate_sf_campaigns', FALSE)) {
      $form['#validate'][] = 'market_source_user_register_cid_validate';
    }
  }
  else {
    $additional_forms = variable_get('market_source_additional_forms', array());
    if (array_search($form_id, $additional_forms) !== FALSE) {
      // Add an #after_build callback for webforms.
      $form['#after_build'][] = 'market_source_generic_form_after_build';
      // Add validation callback for campaigns.
      if (variable_get('market_source_validate_sf_campaigns', FALSE)) {
        $form['#validate'][] = 'market_source_generic_form_cid_validate';
      }
    }
  }
}

/**
 * #after_build callback for user registration form.
 */
function market_source_user_register_after_build($form, &$form_state) {
  if ($form_state['submitted']) {
    // Do not add form keys when the form has been submitted.
    return $form;
  }

  // Get form keys array.
  $form_keys = _market_source_build_form_keys($form, 'profile_');

  // Add form_keys to the JS settings array.
  drupal_add_js(array('market_source' => array(
    'form_keys' => array(
      $form['#id'] => $form_keys,
    ),
  )), 'setting');

  // Mandatory return value for #after_build callbacks.
  return $form;
}

/**
 * Campaign ID validation callback for user registration form.
 */
function market_source_user_register_cid_validate($form, &$form_state) {
  // If campaign validation is enabled, validate.
  if (variable_get('market_source_validate_sf_campaigns', FALSE)) {
    $cid = &_market_source_form_find_element($form_state['values'], 'profile_cid');
    if (!empty($cid) && !_market_source_validate_cid($cid)) {
      // Set the cid to empty.
      $cid = '';
    }
  }
}

/**
 * #after_build callback for all webforms.
 */
function market_source_webform_after_build($form, &$form_state) {
  if ($form_state['submitted']) {
    // Do not add form keys when the form has been submitted.
    return $form;
  }

  // When viewing a submission record, expose Market Source fields for editing.
  if (!empty($form['#submission'])) {
    $qs_keys = _market_source_build_qs_keys();
    foreach (array_keys($qs_keys) as $key) {
      $element = &_market_source_form_find_element($form, $key);
      if (!empty($element) && $element['#type'] == 'hidden') {
        $element['#type'] = 'textfield';
      }
    }
  }
  // Otherwise, output the form info to Javascript so it can be populated.
  else {
    // Get form keys array.
    $form_keys = _market_source_build_form_keys($form);

    // Set the array.
    $settings = array(
      'form_keys' => array(
        $form['#id'] => $form_keys,
      ),
    );

    // Add form_keys to the JS settings array.
    drupal_add_js(array('market_source' => $settings), 'setting');
  }

  // Mandatory return value for #after_build callbacks.
  return $form;
}

/**
 * Campaign ID validation callback for webforms.
 */
function market_source_webform_cid_validate($form, &$form_state) {
  // If campaign validation is enabled, validate.
  if (variable_get('market_source_validate_sf_campaigns', FALSE)) {
    $cid_element = &_market_source_form_find_element($form, 'cid');
    $cid = &_market_source_form_find_element($form_state['values'], 'cid');
    if (!empty($cid) && !_market_source_validate_cid($cid)) {
      // Find the component in the webform components list.
      $cid_component = &_market_source_webform_find_component($form['#node']->webform['components'], 'cid');
      if ($cid_component && !empty($cid_component['value'])) {
        // Set the cid to the form's default cid.
        form_set_value($cid_element, $cid_component['value'], $form_state);
      }
    }
  }
}

/**
 * #after_build callback for generic forms.
 */
function market_source_generic_form_after_build($form, &$form_state) {
  if ($form_state['submitted']) {
    // Do not add form keys when the form has been submitted.
    return $form;
  }

  // Get form keys array.
  $prefix = isset($form['#market_source_prefix']) ? $form['#market_source_prefix'] : NULL;
  $form_keys = _market_source_build_form_keys($form, $prefix);

  // Set the array.
  $settings = array(
    'form_keys' => array(
      $form['#id'] => $form_keys,
    ),
  );

  // Add form_keys to the JS settings array.
  drupal_add_js(array('market_source' => $settings), 'setting');

  // Mandatory return value for #after_build callbacks.
  return $form;
}

/**
 * Campaign ID validation callback for generic forms.
 */
function market_source_generic_form_cid_validate($form, &$form_state) {
  // If campaign validation is enabled, validate.
  if (variable_get('market_source_validate_sf_campaigns', FALSE)) {
    $cid = &_market_source_form_find_element($form_state['values'], 'cid');
    if (!empty($cid) && !_market_source_validate_cid($cid)) {
      // Set the cid to empty.
      $cid = '';
    }
  }
}

/**
 * Add settings array with all market source querystring keys.
 */
function _market_source_build_qs_keys() {
  static $qs_keys = array();
  if (empty($qs_keys)) {
    // Initial keys.
    $qs_keys = array(
      'initial_referrer' => NULL,
      'referrer' => NULL,
      'ms' => NULL,
      'cid' => NULL,
    );
    // Add any custom fields.
    $custom_fields = variable_get('market_source_custom_fields', array());
    if (is_array($custom_fields)) {
      foreach ($custom_fields as $field) {
        $qs_keys[$field['key']] = NULL;
      }
    }
  }
  return $qs_keys;
}

/**
 * Traverse the $form array for each $qs_keys key.
 */
function _market_source_build_form_keys(&$form, $prefix = NULL) {
  // Return $qs_keys array.
  $qs_keys = _market_source_build_qs_keys();

  $form_keys = array();
  foreach (array_keys($qs_keys) as $key) {
    $lookup_key = $key;
    if (!empty($prefix)) {
      $lookup_key = $prefix . $key;
    }
    // Lookup the element ID of $key in $form.
    $element = &_market_source_form_find_element($form, $lookup_key);
    if (is_array($element) && isset($element['#id'])) {
      // Add the element ID to $form_keys.
      $form_keys[$key] = $element['#id'];
    }
  }
  return $form_keys;
}

/**
 * Lookup function for finding the FAPI element corresponding to $key.
 */
function &_market_source_form_find_element(&$form, $key) {
  foreach (element_children($form) as $id) {
    $element = &$form[$id];
    if ($id === $key) {
      return $element;
    }
    else {
      if (is_array($element) && element_children($element)) {
        $retval = &_market_source_form_find_element($element, $key);
        if ($retval !== FALSE) {
          return $retval;
        }
      }
    }
  }
  $retval = FALSE;
  return $retval;
}

/**
 * Lookup function for finding the webform component corresponding to $key.
 */
function &_market_source_webform_find_component(&$components, $key) {
  foreach (element_children($components) as $id) {
    $component = &$components[$id];
    if ($component['form_key'] === $key) {
      return $component;
    }
  }
  $retval = FALSE;
  return $retval;
}

/**
 * Validate a campaign ID.
 */
function _market_source_validate_cid($val) {
  $retval = FALSE;
  $val = trim($val);
  if (!empty($val)) {
    if (preg_match('/^[a-zA-Z0-9_+-]+$/', $val)) {
      if (strlen($val) <= MARKET_SOURCE_CID_MAX_LENGTH) {
        if (variable_get('market_source_validate_sf_campaigns', FALSE)) {
          $campaigns = salesforce_management_api_get_campaigns();
          if (is_array($campaigns) && array_key_exists($val, $campaigns)) {
            $retval = TRUE;
          }
        }
      }
    }
  }
  return $retval;
}

/**
 * Implements hook_nodeapi().
 */
function market_source_nodeapi(&$node, $op) {
  switch ($op) {
    case 'insert':
      $webform_types = variable_get('webform_node_types', '');
      // Skip adding custom webform components if the node is being cloned.
      if (!$node->is_being_cloned && !$node->clone_from_original_nid) {
        // make sure this node type contains a webform and it's not a donation form.
        if (!(module_exists('fundraiser') && fundraiser_is_donation_type($node->type)) && in_array($node->type, $webform_types)) {
          module_load_include('inc', 'webform', 'includes/webform.components');
          // don't add standard fields to webform_user because it handles the fields itself 
          if (module_exists('webform_user') && $node->is_webform_user) {
            $custom_fields = variable_get('market_source_custom_fields', array());
            foreach ($custom_fields as $custom_field) {
              $component = market_source_create_webform_component($custom_field, $node->nid);
              webform_component_insert($component);
            }
          }
          else {
            $components = market_source_create_standard_components($node->nid);
            // insert all the components
            foreach ($components as $component) {
              webform_component_insert($component);
            }
          }
        }
     }
     break;
  }
}

/**
 * Implementation of hook_user().
 */
function market_source_user($op, &$edit, &$account, $category = NULL) {
  if ($op == 'register') {
    // Add the qs_keys as hidden fields on the user registration form.
    $form = array();
    $qs_keys = _market_source_build_qs_keys();
    foreach (array_keys($qs_keys) as $key) {
      $form['profile_' . $key] = array(
        '#type' => 'hidden',
      );
    }
    return $form;
  }
}

/**
 * Adds the default market source components.
 *
 * @param $nid
 *   The id of the node to which the components will be added.
 * @param $default_campaign
 *   A default value for the campaign id component.
 */
function market_source_create_standard_components($nid, $default_campaign = NULL) {
  module_load_include('inc', 'webform', 'includes/webform.components');
  
  // array to hold all the components that need to be created.
  $components = array();

  $components['market_source'] = array(
    'nid' => $nid,
    'pid' => 0,
    'value' => variable_get('market_source_default_campaign', 'default_ms'),
    'form_key' => 'ms',
    'name' => 'Market Source',
    'type' => 'hidden',
    'extra' => array('description' => '',),
    'mandatory' => 1, 
    'weight' => 20,
    'email' => 1,
    'maps_to' => 'profile_ms',
  );

	// campaign id
	$components['campaign'] = array(
	  'nid' => $nid,
	  'pid' => 0,
	  'value' => $default_campaign,
	  'form_key' => 'cid',
	  'name' => t('Campaign ID'),
	  'type' => 'hidden',
	  'extra' => array('description' => ''),
	  'mandatory' => 1,
	  'weignt' => 21,
	  'email' => 1,
	  'maps_to' => 'profile_cid',
	);
  
	// referrer
	$components['referrer'] = array(
	  'nid' => $nid,
	  'pid' => 0 ,
	  'value' => '',
	  'form_key' => 'referrer', 
	  'name' => t('Referrer'),
	  'type' => 'hidden',  
	  'extra' => array('description' => ''),
	  'mandatory' => 0, 
	  'weight' => 22,
	  'email' => 1,
	  'maps_to' => 'profile_referrer',
	);
	
	// initial referrer
	$components['initial_referrer'] = array(
	  'nid' => $nid,
	  'pid' => 0,
	  'value' => '',
	  'form_key' => 'initial_referrer', 
	  'name' => t('Initial Referrer'),
	  'type' => 'hidden',  
	  'extra' => array('description' => '',),
	  'mandatory' => 0, 
	  'weight' => 23, 
	  'email' => 1,
	  'maps_to' => 'profile_initial_referrer',
	);
	
	// If any custom fields have been configured, add them as well
	$custom_fields = variable_get('market_source_custom_fields', array());

	if (count($custom_fields)) {
	  foreach ($custom_fields as $custom_field) {
	    $components[$custom_field['key']] = market_source_create_webform_component($custom_field, $nid);
	  }
	}
  return $components;  
}

/**
 * Implements hook_fundraiser_create_webform_components().
 */
function market_source_fundraiser_create_webform_components($nid) {
  // if the sf_donation is installed, try to get the default campaign
	$default_campaign = '';
	if (variable_get('fundraiser_salesforce_integration', 0) && module_exists('sf_donation')) {
		$default_campaign = variable_get('sf_donation_default_campaign', 'default_cid');
	}
	
	// create the standard components
	return market_source_create_standard_components($nid, $default_campaign);
}

/**
 * Create a formatted webform component array.
 * 
 * @param $custom_field
 * Custom field array containing field key and field name values.
 * 
 * @param $nid
 * Node id of the webform to add the component to.
 * 
 * @return
 * Returns a keyed array containing the minimum necessary data to create a new webform component via
 * webform_component_insert().
 */
function market_source_create_webform_component($custom_field, $nid) {
  $component = array(
    'nid' => $nid,
  	'pid' => 0,
  	'value' => $custom_field['default'],
  	'form_key' => $custom_field['key'], 
  	'name' => $custom_field['name'],
  	'type' => 'hidden',  
  	'extra' => array('description' => '',),
  	'mandatory' => 0, 
  	'weight' => 23, 
  	'email' => 1,
  	'maps_to' => '',
  );
  return $component;
}

/**
 * Implements hook_theme().
 */
function market_source_theme($existing, $type, $theme, $path) {
  return array(
    'market_source_admin_global_fields_table' => array(
      'arguments' => array('element' => NULL),
      'file' => 'market_source.admin.inc',
    ),
  );
}

/**
 * Legacy support: Fetches the user's referring market source (if any).
 */
function market_source_get_ms() {
  // Return empty string. Client-side JS will handle all of this.
  return '';
}

/**
 * Legacy support: Fetches the user's referring campaign ID (if any).
 */
function market_source_get_cid() {
  // Return empty string. Client-side JS will handle all of this.
  return '';
}

/**
 * Legacy support: Fetches the user's referring URL (if any).
 */
function market_source_get_referrer() {
  // Return empty string. Client-side JS will handle all of this.
  return '';
}

/**
 * Legacy support: Fetches the user's initial referring URL (if any).
 */
function market_source_get_initial_referrer() {
  // Return empty string. Client-side JS will handle all of this.
  return '';
}
