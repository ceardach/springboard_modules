<?php
// $Id$

/**
 * @file
 * Fundraiser module submission tests.
 */

// JoelR, 4/23/2012: disabling ?>
<!-- 

class FundraiserGoalsUITestCase extends FundraiserTestCase {
  /**
   * Implementation of getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => t('Fundraiser Goals UI'),
      'description' => t('Confirms basic UI elements are working.'),
      'group' => t('Springboard'),
    );
  }

  /**
   * Implementation of setUp().
   */
  function setUp() {
    parent::setUp('fundraiser_goals');
  }

  /**
   * Implementation of tearDown().
   */
  function tearDown() {
    parent::tearDown();
  }
  
  /**
   * Tests that a donation form edit screen includes goals UI.
   */
  function testDonationFormUI() {
    $this->fundraiserReset();
    // login the user and load their profile
    $this->drupalLogin($this->_user);
    
    // Add settings for goals fields.
    $args['settings'] = array(
        'fundraiser_goal_delta' => 'basic',
        'fundraiser_goal_type' => 1,
        'fundraiser_goal_target_cid' => '',
        'fundraiser_goal_target' => 50000,
        'fundraiser_goal_template' => 'Goal value: [goal-value] Goal value formatted: [goal-value-formatted] calculated value: [calculated-value] calculated value formatted: [calculated-value-formatted]',
        'fundraiser_goal_weight' => 0,
        'fundraiser_goal_display_threshold' => 0,
        'fundraiser_goal' => array('goals_wrapper' => array('template' => 0)),
        'fundraiser_goal_default_message' => 'test: ##starter_message',
    );
    
    // Create donation form
    $node = $this->testFundraiserForm($args);
    
    // Set basic goal block visibility
    $this->drupalGet('admin/build/block/list');
    $this->drupalPost('admin/build/block/list', array(), t('Save blocks'));
    $bid = db_result(db_query('SELECT bid FROM {blocks} WHERE module = "fundraiser_goals"'));
    $this->assertNotNull($bid, t('Basic block is in database.'));
    db_query('UPDATE {blocks} SET region = "left", status = 1 WHERE bid = %d', $bid);

    
    $this->drupalGet('node/' . $node->nid . '/edit'); 
    $this->assertFieldById('edit-fundraiser-goal-type', '', 'Goal type present.');
    $this->assertFieldById('edit-fundraiser-goal-target', $args['settings']['fundraiser_goal_target'], 'Target field present, data saving as expected.');
    $this->assertFieldById('edit-fundraiser-goal-template', $args['settings']['fundraiser_goal_template'], 'Template field present, data saving as expected.');
    $this->assertFieldById('edit-fundraiser-goal-display-threshold', $args['settings']['fundraiser_goal_display_threshold'], 'Display threshold present, data saving as expected.');
    $this->assertFieldById('edit-fundraiser-goal-default-message', $args['settings']['fundraiser_goal_default_message'], 'Starter message present, data saving as expected.');

    // Confirm basic block visibility
    $this->drupalGet('node/' . $node->nid);
    $this->assertText('Goal value: 50000', t('Goal value token replacement.'));
    $this->assertText('Goal value formatted: 50,000', t('Goal value formatted token replacement')); 
    $this->assertText('calculated value: 0', t('Calculated value token replacement')); 
    $this->assertText('calculated value formatted: 0', t('Calculated value formatted token replacement'));
    $this->pass(var_export($this->drupalGetContent(), TRUE)); 
    // Confirm token replacement
    
    
  }
  

  
}

-->