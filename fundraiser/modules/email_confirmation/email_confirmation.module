<?php

include_once('email_confirmation.features.inc');

/**
 * Implements hook_menu().
 */
function email_confirmation_menu() {
  $items = array();
  /* #AHAH callback for the email template form elements */
  $items['email_confirmation/js'] = array(
    'page callback' => '_email_confirmation_template_ahah',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  // TODO: add administer fundraiser perm to Fundraiser? Default perm "access content" isn't appropriate for admin pages.
  $items['admin/settings/fundraiser/confirmations'] = array(
    'title' => 'Confirmation settings',
    'description' => 'Administer email confirmation settings.',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('email_confirmation_admin'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['email_confirmation/preview_modal'] = array(
    'title' => 'Confirmation Email Template Preview',
    'access callback' => TRUE,
    'page callback' => 'email_confirmation_modal_preview',
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
  );
  $items['admin/content/confirmation_templates'] = array(
    'title' => 'Confirmation Email Templates',
    'description' => '',
    'page callback' => 'email_confirmation_template_list',
    'access arguments' => array('create confirmation_template content'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;

}

/**
 * Implements hook_menu_alter().
 */
function email_confirmation_menu_alter(&$items) {
  $items['node/%webform_menu/webform/confirmations']['access callback'] = 'email_confirmation_fundraiser_confirmations_perm';
}

/**
 * Implements hook_form_alter().
 */
function email_confirmation_form_alter(&$form, &$form_state, $form_id) {
  global $base_path;
  require_once('email_confirmation.defaults.inc');

  // @see http://jbenner.net/blog/prevent-ahah-the-right-way-from-breaking-with-validation
  if (isset($form_state['action'])) {
    $form['#action'] = $form_state['action'];
  }

  if ($form_id == 'confirmation_template_node_form') {
    $node = $form['#node'];

    // New node, add default template & message values
    if (!$form['nid']['#value']) {
      // HTML
      $form['body_field']['body']['#default_value'] = email_confirmation_default_html_template();
      $form['field_confirmation_html_message'][0]['#default_value']['value'] = email_confirmation_default_html_message();
      
      // Text
      $form['field_confirmation_text'][0]['#default_value']['value'] = email_confirmation_default_text_template();
      $form['field_confirmation_text_message'][0]['#default_value']['value'] = email_confirmation_default_text_message();
    }

    // Add token to subject
    $form['subject_field'] = array(
      '#type' => 'fieldset',
      '#title' => t('Subject Template Settings'),
    );
    $form['subject_field']['field_confirmation_subject'] = $form['field_confirmation_subject'];
    $form['subject_field']['field_confirmation_subject']['#weight'] = 0;
    $form['subject_field']['subject_field_tokens'] = array(
      '#type' => 'fieldset',
      '#title' => t('Available confirmation message tokens'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => 1,
    );
    $form['text_field']['text_tokens']['help'] = array(
      '#value' => theme('token_help', 'order') . theme('webform_token_help', $node),
    );
    unset($form['field_confirmation_subject']);

    // Add token display to text message
    $text_field = $form['#field_info']['field_confirmation_text'];
    $text_message = $form['#field_info']['field_confirmation_text_message'];
    $form['text_field'] = array(
      '#type' => 'fieldset',
      '#title' => t('Text Template Settings'),
    );
    $form['text_field']['field_confirmation_text'] = $form['field_confirmation_text'];
    $form['text_field']['field_confirmation_text']['#weight'] = 0;
    $form['text_field']['text_tokens'] = array(
      '#type' => 'fieldset',
      '#title' => t('Available confirmation message tokens'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => 1,
    );
    $form['text_field']['text_tokens']['help'] = array(
      '#value' => theme('token_help', 'order') . theme('webform_token_help', $node),
    );
    $form['text_field']['field_confirmation_text_message'] = $form['field_confirmation_text_message'];
    $form['text_field']['field_confirmation_text_message']['#weight'] = 10;
    $form['text_field']['message_tokens'] = array(
      '#type' => 'fieldset',
      '#title' => t('Available confirmation message tokens'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => 11,
    );
    $form['text_field']['message_tokens']['help'] = array(
      '#value' => theme('token_help', 'order') . theme('webform_token_help', $node),
    );
    unset($form['field_confirmation_text']);
    unset($form['field_confirmation_text_message']);

    // Add token display to HTML message
    $form['body_field']['#type'] = 'fieldset';
    $form['body_field']['#title'] = t('HTML Template Settings');
    $form['body_field']['field_confirmation_html_message'] = $form['field_confirmation_html_message'];
    $form['body_field']['field_confirmation_html_message']['#weight'] = 10;
    $form['body_field']['message_tokens'] = array(
      '#type' => 'fieldset',
      '#title' => t('Available confirmation message tokens'),
      '#weight' => 11,
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['body_field']['message_tokens']['help'] = array(
      '#value' => theme('token_help', 'order') . theme('webform_token_help', $node),
    );
    $form['body_field']['html_tokens'] = array(
      '#type' => 'fieldset',
      '#title' => t('Available confirmation message tokens'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['body_field']['html_tokens']['help'] = array(
      '#value' => theme('token_help', 'order') . theme('webform_token_help', $node),
    );
    unset($form['field_confirmation_html_message']);
  }

  if ($form_id == 'fundraiser_confirmation_settings_form') {
    $node = node_load(array('nid' => $form['nid']['#value']));

    unset($form['email']);
    $form['#validate'] = array('email_confirmation_confirmation_form_validate');
    
    // #AHAH bugfix
   /* $form['#cache'] = TRUE;

    if ($form['nid']['#value'] > 0) {
      $edit_path = url('node/' . $form['nid']['#value'] . '/edit', array('absolute' => TRUE));
    }
    else {
      $edit_path = url('node/add/donation-form', array('absolute' => TRUE));
    }
    if ($form['#action'] != $edit_path) {
      $form['#action'] = $edit_path;
    }*/
  
    // Ctools modals setup for preview button
    module_load_include('inc', 'ctools', 'includes/ajax');
    ctools_include('modal');
    ctools_modal_add_js();
    

    $bcc = array();
 
    // We need to update default values if a user selects a new email template.
    if (isset($form_state['values']['template_wrapper']['email_template'])) {
      
      // Get default values from template.
      $defaults = email_confirmation_load_template($form_state['values']['template_wrapper']['email_template']);
    }
    // Otherwise get defaults from db.
    else {

      $nid = $form['nid']['#value'];

      if ($nid) {
 
        $result = db_query('
          SELECT 
            tid AS nid,
            subject AS field_confirmation_subject_value, 
            from_name AS field_confirmation_from_name_value, 
            reply_to_email AS field_confirmation_reply_email_email, 
            bcc_email AS bcc, 
            html_message AS field_confirmation_html_message_value,
            html_message_format AS confirmation_html_message_format,
            text_message AS field_confirmation_text_message_value,
            text_message_format AS confirmation_text_message_format,
            is_webform,
            send_mail
          FROM {fundraiser_confirmations}
          WHERE nid = %d', $nid);

        $defaults = db_fetch_object($result);
      }

    }
     /* email template configuration, see #133*/

    $form['confirmation_template'] = array(
      '#type' => 'fieldset',
      '#title' => t('Email confirmation'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      //'#weight' => -4.99,
    );
    $form['confirmation_template']['template_wrapper'] = array(
      '#tree' => TRUE,
      '#prefix' => '<div id="template-wrapper">',
      '#suffix' => '</div>',
      '#theme' => 'email_confirmation_template_wrapper',
    );

    // on donation forms, hide the "enable confirmation email" checkbox.
    // it's confusing since email is always sent out on donation form submissions.
    if (fundraiser_is_donation_type($node->type)) {
      $form['confirmation_template']['send_mail'] = array(
        '#type' => 'value',
        '#value' => 1,
      );
      $form['confirmation_template']['default_notice'] = array(
        '#type' => 'markup',
        '#prefix' => '<div><p>',
        '#suffix' => '</p></div>',
        '#value' => t('Donation forms always send an email confirmation. If no template is selected, default values embedded in the Email Confirmation module will be used to format the confirmation email.'),
        '#weight' => -10,
      );
    }
    else {
      $form['confirmation_template']['send_mail'] = array(
        '#type' => 'checkbox',
        '#title' => t('Enable confirmation emails on this webform.'),
        '#description' => t(''),
        '#default_value' => $defaults->send_mail,
        '#weight' => -10,
      );
    }

    $form['confirmation_template']['template_wrapper']['email_template'] = array(
      '#type' => 'select',
      '#title' => t('Confirmation Email Template'),
      '#options' => email_confirmation_list_templates(),
      '#required' => TRUE,
      '#default_value' => $defaults->nid,
    );
    $form['confirmation_template']['template_wrapper']['confirmation_email_import_template'] = array(
      '#type' => 'button',
      '#value' => t('import template settings'),
      '#ahah' => array(
        'path' => 'email_confirmation/js',
        'wrapper' => 'template-wrapper',
        'method' => 'replace',
        'effect' => 'fade',
      ),
    );
    $form['confirmation_template']['template_wrapper']['confirmation_from_name'] = array(
      '#type' => 'textfield',
      '#title' => t('From Name'),
      '#default_value' => $defaults->field_confirmation_from_name_value,
    );
    $form['confirmation_template']['template_wrapper']['confirmation_from_email'] = array(
      '#type' => 'From Email',
      '#title' => t('textfield'),
      '#default_value' => $defaults->field_confirmation_from_email_email,
    );
    $form['confirmation_template']['template_wrapper']['confirmation_reply_email'] = array(
      '#type' => 'textfield',
      '#title' => t('Reply To Email'),
      '#default_value' => $defaults->field_confirmation_reply_email_email,
    );

    $form['confirmation_template']['template_wrapper']['confirmation_bcc_email' . $delta] = array(
      '#type' => 'textfield',
      '#title' => t('BCC Email'),
      '#default_value' => $defaults->bcc,
    );

    $form['confirmation_template']['template_wrapper']['confirmation_subject'] = array(
      '#type' => 'textfield',
      '#title' => t('Subject'),
      '#default_value' => $defaults->field_confirmation_subject_value,
      '#weight' => 8,
    );
    $form['confirmation_template']['template_wrapper']['confirmation_subject_tokens'] = array(
      '#type' => 'fieldset',
      '#title' => t('Available confirmation message tokens'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => 9,
    );
    // TODO: switch between order and all token types if donation form or webform, respectively.
    $form['confirmation_template']['template_wrapper']['confirmation_subject_tokens']['help'] = array(
      '#value' => theme('token_help', 'order') . theme('webform_token_help', $node),
    );

    $form['confirmation_template']['template_wrapper']['confirmation_html_email_message'] = array(
      '#type' => 'textarea',
      '#title' => t('HTML Email Message'),
      '#default_value' => $defaults->field_confirmation_html_message_value,
      '#weight' => 10,
    );
    
    $html_format = ($defaults->confirmation_html_message_format) ? $defaults->confirmation_html_message_format : FILTER_FORMAT_DEFAULT;
    $form['confirmation_template']['template_wrapper']['confirmation_html_message_format'] = filter_form($html_format, 11, array('confirmation_html_message_format'));
    $form['confirmation_template']['template_wrapper']['confirmation_html_tokens'] = array(
      '#type' => 'fieldset',
      '#title' => t('Available confirmation message tokens'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => 12,
    );
    // TODO: switch between order and all token types if donation form or webform, respectively.
    $form['confirmation_template']['template_wrapper']['confirmation_html_tokens']['help'] = array(
      '#value' => theme('token_help', 'order') . theme('webform_token_help', $node),
    );
    $form['confirmation_template']['template_wrapper']['confirmation_text_email_message'] = array(
      '#type' => 'textarea',
      '#title' => t('Text Email Message'),
      '#default_value' => $defaults->field_confirmation_text_message_value,
      '#weight' => 13,
    );
    
    $text_format = ($defaults->confirmation_text_message_format) ? $defaults->confirmation_text_message_format : FILTER_FORMAT_DEFAULT;
    $form['confirmation_template']['template_wrapper']['confirmation_text_message_format'] = filter_form($text_format, 14, array('confirmation_text_message_format'));

    $form['confirmation_template']['template_wrapper']['confirmation_text_tokens'] = array(
      '#type' => 'fieldset',
      '#title' => t('Available confirmation message tokens'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => 15,
    );
    // TODO: switch between order and all token types if donation form or webform, respectively.
    $form['confirmation_template']['template_wrapper']['confirmation_text_tokens']['help'] = array(
      '#value' => theme('token_help', 'order') . theme('webform_token_help', $node),
    );
 
    $form['confirmation_template']['template_wrapper']['preview'] = array(
     '#type' => 'button',
      '#value' => t('Preview'),
      '#attributes' => array('class' => 'ctools-use-modal'),
      '#weight' => 20,
    );

    $form['is_webform'] = array(
      '#type' => 'value',
      '#value' => 0,
    );
    
    // Validate email template selection field
    $form['#after_build'][] = 'email_confirmation_after_build';
    $form['#validate'][] = 'email_confirmation_template_validate';
    $form['#submit'][] = 'email_confirmation_template_submit';
   /**
    * TODO: tl;dr - confirmation page field items need refactoring to work on webforms.
    * 
    *  We need to back out the confirmation page form components on non-donation forms.
    *  These fields are tied in with fundraiser.module's implementation of hook_nodeapi and as
    *  such would require a nontrivial refactoring of fundraiser and email confirmations to 
    *  get working for all webform content types. 
    */
    if (!fundraiser_is_donation_type($form['#parameters'][2]->type)) {
      unset($form['confirmation_page']);
      $form['confirmation_template']['#collapsed'] = FALSE;
   
      // Donation forms send mail during a different step in the process.
      $form['is_webform']['#value'] = 1;
      $form['#validate'] = array('email_confirmation_template_validate');
    }
  }
  
  // Add a submit handler to basic webforms, this reeks of a hack.
  if (strpos($form_id, 'webform_client_form') === 0 && !fundraiser_is_donation_type($form['#node']->type)) {
    $form['#submit'][] = 'email_confirmation_webform_send_mail';
  }
}

function email_confirmation_after_build($form, $form_state) {

  drupal_add_js(drupal_get_path('module', 'email_confirmation') . '/email_confirmation.js');
  module_load_include('inc', 'ctools', 'includes/ajax');
  ctools_include('modal');
  ctools_modal_add_js();
  
  return $form;
}

/**
 * Validate email template selection field.
 */
function email_confirmation_template_validate(&$form, $form_state) {
  if ($form_state['values']['send_mail'] && !$form_state['values']['template_wrapper']['email_template']) {
    form_set_error('email_template', t('You must select an email template for confirmation emails generated by this form.'));
  }
}

/**
 * 
 */
function email_confirmation_template_submit(&$form, $form_state) {


  // If no mail template is selected there's no point in saving settings.
  if (!$form_state['values']['template_wrapper']) {
    return 0;
  }
  
  $values = $form_state['values']['template_wrapper'];
  $nid = $form_state['values']['nid'];
  if (is_numeric($nid)) {
    $update = db_result(db_query('SELECT 1 FROM {fundraiser_confirmations} WHERE nid = %d', $nid));
  }
  else {
    $update = FALSE;
  }
  
  $tid = $values['email_template'];
  $subject = $values['confirmation_subject'];
  $from_name =  $values['confirmation_from_name'];
  $reply_to_email = $values['confirmation_reply_email'];
  $bcc_email = $values['confirmation_bcc_email'];
  $html_body = $values['confirmation_html_email_message'];
  $html_body_format = $form_state['values']['confirmation_html_message_format'];
  $text_body = $values['confirmation_text_email_message'];
  $text_body_format = $form_state['values']['confirmation_text_message_format'];
  $is_webform = $form_state['values']['is_webform'];
  $send_mail = $form_state['values']['send_mail'];
    
  if ($update) {
    db_query("UPDATE {fundraiser_confirmations} SET tid = %d, subject = '%s', from_name = '%s', reply_to_email = '%s', bcc_email = '%s', html_message = '%s', html_message_format = %d, text_message = '%s', text_message_format = '%s', is_webform = %d, send_mail = %d WHERE nid = %d", $tid, $subject, $from_name, $reply_to_email, $bcc_email, $html_body, $html_body_format, $text_body, $text_body_format, $is_webform, $send_mail, $nid);
  }
  else {
    db_query("INSERT INTO {fundraiser_confirmations} (nid, tid, subject, from_name, reply_to_email, bcc_email, html_message, 
    html_message_format, text_message, text_message_format, is_webform, send_mail) 
      VALUES (%d, %d, '%s', '%s', '%s', '%s', '%s', %d, '%s', %d, %d, %d)", $nid, $tid, $subject, $from_name, $reply_to_email, $bcc_email, $html_body, $html_body_format, $text_body, $text_body_format, $is_webform, $send_mail);
  }
}


/**
 * Implements hook_nodeapi().
 */
function email_confirmation_nodeapi(&$node, $op) {
  if (fundraiser_is_donation_type($node->type)) {
    switch ($op) {
      case 'load':
        $confirmation_settings = db_fetch_array(db_query('SELECT  
          tid as email_template, 
          subject as confirmation_subject, 
          from_name as confirmation_from_name,
          reply_to_email as confirmation_reply_email,
          bcc_email as confirmation_bcc_email,
          html_message as confirmation_html_email_message,
          html_message_format,
          text_message as confirmation_text_email_message,
          text_message_format
          FROM {fundraiser_confirmations} WHERE nid = %d', $node->nid));

        $node->template_wrapper = $confirmation_settings;
        $node->confirmation_html_message_format = $confirmation_settings['html_message_format'];
        $node->confirmation_text_message_format = $confirmation_settings['text_message_format'];
        break;

      case 'delete': 
        db_query('DELETE FROM {fundraiser_confirmations} WHERE nid = %d', $node->nid);
        break;
    }
  }
}

/**
 * Lists available confirmation templates based on user's group membership and other permissions
 */
function email_confirmation_list_templates() {
  global $user;
  $templates = array('0' => ' - select -');
  if (module_exists('og') && variable_get('emaiL_confirmation_og_filter', 0)) {
    //List user's groups
    $group_nids = array();
    $results = db_query('SELECT DISTINCT nid FROM {og_uid} WHERE uid = %d', $user->uid);
    while ($nid = db_result($results)) {
      $group_nids[] = $nid;
    }
    //pull list of template nodes assigned to these groups
    $results = db_query("SELECT n.nid, n.title FROM {node} n INNER JOIN {og_ancestry} oa ON n.nid = oa.nid  WHERE oa.group_nid IN ('%s') AND n.type = 'confirmation_template'", implode(',', $group_nids));

  }
  else {
    $results = db_query("SELECT n.nid, n.title FROM {node} n where type = 'confirmation_template'");
  }
  while ($node = db_fetch_object($results)) {
    $templates[$node->nid] = $node->title;    
  }
  // check any additional perms and build list of additional templates if warranted.
  return $templates;
}


/**
 * #AHAH callback for email template selection form element.
 */
function _email_confirmation_template_ahah() {
  module_load_include('inc', 'fundraiser', 'fundraiser.admin');
  $form_state = array('storage' => NULL, 'submitted' => FALSE);
  $form_build_id = $_POST['form_build_id'];

  $form = form_get_cache($form_build_id, $form_state);
  
  $args = $form['#parameters'];
  $form_id = array_shift($args);
  $form_state['post'] = $form['#post'] = $_POST;
  $form['#programmed'] = $form['#redirect'] = FALSE;

  // Disable validation
  $form['#validate'] = NULL;
  $form_state['validate_handlers'] = NULL;
  fundraiser_ahah_helper_disable_validation($form);
  $form_state['action'] = $form['#action']; 
  drupal_process_form($form_id, $form, $form_state);
  $form = drupal_rebuild_form($form_id, $form_state, $args, $form_build_id);
  $template_form = $form['confirmation_template']['template_wrapper'];
  unset($template_form['#prefix'], $template_form['#suffix']);
 
  $output = theme('status_messages') . drupal_render($template_form);

  $form_state = array('submitted' => FALSE);
  $form_build_id = $_POST['form_build_id'];
  drupal_json(array('status' => TRUE, 'data' => $output));
}

/**
 * Implements hook_fundraiser_order_success().
 */
function email_confirmation_fundraiser_order_success($order) {
  $GLOBALS['order'] = $order;
  // Since $GLOBALS isn't available within the scope of check_markup, we have to store
  // the order in $_SESSION to make the data available to php input filter. This
  // is required to permit conditional templating on $order values.
  $_SESSION['donation_order'] = $order;
  $settings = db_fetch_object(db_query(
    'SELECT * FROM {fundraiser_confirmations} '.
    'WHERE nid = %d',
    $order->products[0]->nid));
  // If sending mail is enabled on this donation form, continue.
  if ($settings->send_mail) {
    // Gather settings from the db and build the custom email
    if ($settings->tid) {
      $node = node_load($order->products[0]->nid);
      $sid = db_result(db_query(
        'SELECT sid FROM {fundraiser_webform_order} '.
        'WHERE order_id = %d',
        $order->order_id));
      $submission = webform_get_submission($node->nid, $sid);
      $result = db_fetch_object(db_query(
        'SELECT body, format FROM {node_revisions} nr '.
        'INNER JOIN {node} n '.
        'WHERE n.vid = nr.vid AND nr.nid = %d',
        $settings->tid));
      $template_html = check_markup($result->body, $result->format, FALSE);
      // TODO: convert field to accept input filters.
      $template_text = db_result(db_query(
        'SELECT field_confirmation_text_message_value FROM {content_type_confirmation_template} t '.
        'INNER JOIN {node} n ON n.vid = t.vid '.
        'WHERE t.nid=%d',
        $settings->tid));

      $message = array();
      $message['from_name'] = $settings->from_name;
      $message['from_address'] = $settings->reply_to_email;
      $message['subject'] = token_replace($settings->subject, 'order', $order);

      // Perform token replacements for "order" tokens and "all" tokens.
      // token replacement on the template, adds html_message to the message body via token replacement.
      $message['html_body'] = token_replace($template_html, 'order', $order);

      // 2nd pass performs order token replacement on combined template + message
      $message['html_body'] = token_replace($message['html_body'], 'order', $order);

      // 3rd pass replaces generic "all" tokens
      $message['html_body'] = token_replace($message['html_body']);

      // final pass attempts to replace webform token values
      $message['html_body'] = _webform_filter_values($message['html_body'], $node, $submission, NULL, FALSE, FALSE);
 

      // Same as above, with check_plain() included to insure final output is plain text.
      $message['text_body'] = token_replace($template_text, 'order', $order);
      $message['text_body'] = token_replace($message['text_body'], 'order', $order);
      $message['text_body'] = token_replace($message['text_body']);
      $message['text_body'] = _webform_filter_values($message['text_body'], $node, $submission, NULL, FALSE, FALSE);
      $message['text_body'] = check_plain($message['text_body']);
      $message['bcc'] = $settings->bcc_email;
      // Hack! Do a last minute string replace to sidestep around issues with ubercart adding the wrong currency symbol.
      // This is hopefully a temporary workaround until I can figure out how to tap into uc_price().
      if (module_exists('fundraiser_multi_currency') && isset($order->data['currency'])) {
          $currencies = fundraiser_multi_currency_get_default_currencies();
          $symbol = isset($currencies[$order->data['currency']]) ? $currencies[$order->data['currency']]['symbol'] : $order->data['currency'];
          $message['text_body'] = str_replace('$', $symbol, $message['text_body']);
          $message['html_body'] = str_replace('$', $symbol, $message['html_body']);
      }
      $sent = drupal_mail('email_confirmation', 'confirmation', $order->primary_email, language_default(), $message);
    }
    // If no settings are present use the default email template.
    else {
      $order->form_title = db_result(db_query(
        'SELECT title FROM node '.
        'WHERE nid=%d',
        $order->products[0]->nid));
      $site_name = variable_get('site_name', '');
      $site_mail = variable_get('site_mail', '');
      $message['from_name'] = $site_name;
      $message['from_address'] = $site_mail;
      $message['subject'] = t('Thank you for your donation');
      $message['html_body'] = theme('default_confirmation_template', $order, $site_url, $site_name);
      $sent = drupal_mail('email_confirmation', 'confirmation', $order->primary_email, language_default(), $message);
    }
  }
  unset($_SESSION['donation_order']);
}

/**
 * Implements hook_mail().
 */
function email_confirmation_mail($key, &$message, $params) {

  // To make the HTML email work, implement all our own headers
  $boundary = '----=_NextPart_'.md5(uniqid());
  
  $headers = array(
   'MIME-Version' => '1.0',
   'Content-Type' => 'multipart/alternative; boundary="'.$boundary.'"',
   'Content-Transfer-Encoding' => '8Bit',
   'X-Mailer' => 'Drupal',
  );

  $default_from = $params['from_name'] . ' <' . $params['from_address'] . '>';
  $headers['From'] = $headers['Sender'] =  $headers['Return-Path'] = $headers['Errors-To'] = $default_from;
  
  if (!empty($params->bcc_address)) {
    $headers['Bcc'] = $params['bcc_address'];
  }
  //
  // Now create the message, with an HTML component and a plaintext component
  //

  $body_html = $params['html_body'];
  $body_text = '<html><head></head><body>' . $params['text_body'] . '</body></html>';

  $multi_body  = "

This is a multi-part message in MIME format.

--$boundary
Content-Type: text/plain; charset=UTF-8; format=flowed; 
Content-Transfer-Encoding: 8bit

$body_text

--$boundary
Content-Type: text/html; charset=UTF-8; format=flowed; 
Content-Transfer-Encoding: 8bit

$body_html

";

  $message['subject'] = $params['subject'];
  $message['body'][] = $multi_body;
  $message['headers'] = $headers;
}

/**
 * Implements hook_token_list().
 */
function email_confirmation_token_list($type = 'all') {
  $tokens = array();
  if ($type == 'order') {
    $tokens['order']['confirmation-message-text'] = t('The text version of the donation confirmation message.');
    $tokens['order']['confirmation-message-html'] = t('The HTML version of the donation confirmation message.');
  }
  return $tokens;
}

/**
 * Implements hook_token_values().
 */
function email_confirmation_token_values($type, $object = NULL) {
  // Limit the replacement to hook invocations that pass a viable order object.
  if ($type == 'order' || $type == 'all') {

    // $object contains UC order values on donation forms and the node object on webforms.
    $nid = $object->products[0]->nid ? $object->products[0]->nid : $object->nid;

    $data = db_fetch_object(db_query('SELECT html_message, html_message_format, text_message, text_message_format FROM {fundraiser_confirmations} WHERE nid=%d', $nid));
    $values['confirmation-message-text'] = check_markup($data->text_message, $data->text_message_format, FALSE);
    $values['confirmation-message-text'] = check_plain($values['confirmation-message-text']);

    $php_filter = db_result(db_query('SELECT format FROM {filter_formats} WHERE name = "PHP code"'));

    // We want to prevent core filters from manipulating template markup unless the php filter is selected.
    if ($php_filter && $data->html_message_format == $php_filter) {
      $values['confirmation-message-html'] = check_markup($data->html_message, $data->html_message_format, FALSE);
    }
    else {
      $values['confirmation-message-html'] = $data->html_message;
    }
    $values['order-node-title'] = check_plain($node->title);
    return $values;
  }
}

/**
 * Admin configuration form.
 */
function email_confirmation_admin() {
  $form = array();
  $form['emaiL_confirmation_og_filter'] = array(
    '#type' => 'checkbox',
    '#title' => t('Limit templates by group.'),
    '#description' => t('Use OG group membership to resitrict available confirmation templates. When this is enabled content editors will only see email templates assigned to groups they are members of when creating or editing donation forms.'),
    '#default_value' => variable_get('emaiL_confirmation_og_filter', 0),
  );
  return system_settings_form($form);
}

/**
 * Page callback for template modal preview.
 * 
 */
function email_confirmation_modal_preview() {
 module_load_include('inc', 'ctools', 'includes/modal');
 $title = 'Template Preview';
 $values = $_POST['template_wrapper'];

 $output = array();
 $output['subject'] = $values['confirmation_subject'];
 $output['email'] = array(
   'from' => '&lt;' . $values['confirmation_from_name'] . '&gt;' . $values['confirmation_reply_email'],
   'bcc' => $values['confirmation_bcc_email'],
 );
 $output['HTML'] = _email_confirmation_preview('html', $values['confirmation_html_email_message'], $values['email_template']);
 $output['text'] = _email_confirmation_preview('text', $values['confirmation_text_email_message'], $values['email_template']);
 $keys = array_keys($output);
 foreach($keys as $key) {
   if (is_array($output[$key])) {
 
     $preview .= '<fieldset id="field-' . $key . '"><label for="field-' . $key . '" style="font-weight:bold">' . ucfirst($key) . '</label>';
     $subkeys = array_keys($output[$key]);
     foreach ($subkeys as $subkey) {
       $preview .= '<p>' . ucfirst($subkey) . ':&nbsp; ' . $output[$key][$subkey] . '</p>'; 
     }
     $preview .= '</fieldset>';  
   }
    else {
     $preview .= '<fieldset id="field-' . $key . '"><label for="field-' . $key . '" style="font-weight:bold">' . ucfirst($key) . '</label>';
     $preview .= '<div>' . $output[$key] . '</div>';
     $preview .= '</fieldset>';
   }
 }
 
 ctools_modal_render($title, $preview);
}

/**
 * 
 */
function _email_confirmation_preview($op, $message, $nid) {

  $object = _email_confirmation_test_object();
  $output = '';
  switch ($op) {
    case 'html':
      $output = db_result(db_query("SELECT body FROM {node_revisions} nr INNER JOIN {node} n ON n.vid = nr.vid WHERE n.nid = %d", $nid));
      $output = preg_replace('/\[confirmation-message-html\]/', $message, $output); 
      break;
    case 'text':
      $output = db_result(db_query("SELECT ct.field_confirmation_text_value FROM {content_type_confirmation_template} ct INNER JOIN {node} n ON n.vid = ct.vid WHERE ct.nid = %d", $nid));
      $output = preg_replace('/\[confirmation-message-text\]/', $message, $output);
      $output = preg_replace('/\n/', '<br />', $output);
      break;
    default:
      break;
  }
  return token_replace($output, 'order', $object);
}

/**
 * Helper function, generates a bogus order object for use with the template preview.
 */
function _email_confirmation_test_object() {
  $object = new stdClass;
  $object->order_id = 1;
  $object->uid = 1;
  $object->order_status = 'fake';
  $object->order_total = 100;
  $object->product_count = 1;
  $object->primary_email = 's.holmes@example.com';
  $object->delivery_first_name = ''; 
  $object->delivery_last_name = ''; 
  $object->delivery_phone = ''; 
  $object->delivery_company = ''; 
  $object->delivery_street1 = ''; 
  $object->delivery_street2 = ''; 
  $object->delivery_city = ''; 
  $object->delivery_zone = 0;
  $object->delivery_postal_code = ''; 
  $object->delivery_country = 840;
  $object->billing_first_name = 'S.';
  $object->billing_last_name = 'Holmes';
  $object->billing_phone = ''; 
  $object->billing_company = ''; 
  $object->billing_street1 = '221B Baker Street';
  $object->billing_street2 = ''; 
  $object->billing_city = 'Durham';
  $object->billing_zone = '44';
  $object->billing_postal_code = '27703';
  $object->billing_country = 840;
  $object->payment_method = 'credit';
  $object->data = array(
    'cc_data' => ')Ya,e[S1{bqOP.xl&gt;2o6-J1-3@J}w]X{?HX6dT#7w8oa)=$KhBl$UCqD4&amp;W@?WWA&gt;VKcyHbD[&amp;cdVUBtT |nX?8?}XaMYJesDE3smx&gt;8pb}#bXbXH9',
  );

  $object->created = time();
  $object->modified = time();
  $object->host = '127.0.0.1';
  $object->products = array();

  $product = new stdClass;
  $product->order_product_id = 45;
  $product->order_id = 45;
  $product->nid = 6;
  $product->title = 'Fictional Donation Form';
  $product->manufacturer = ''; 
  $product->model = ''; 
  $product->qty = 1;
  $product->cost = 0.00000;
  $product->price = 100.00000;
  $product->weight = 0;
  $product->data = array(
    'shippable' => '', 
    'model' => '',
    'varprice' => 20,
    'module' => 'uc_product',
  );
  $product->order_uid = 1;
  
  $object->products[] = $product;
  unset($product);

  $object->payment_details = array(
    'cc_type' => 'mc',
    'cc_owner' => '',
    'cc_number' => '1111111111111111',
    'cc_start_month' => '', 
    'cc_start_year' => '', 
    'cc_exp_month' => 1, 
    'cc_exp_year' => '2025',
    'cc_issue' => '', 
    'cc_cvv' => '000',
    'cc_bank' => '', 
  );

  $object->line_items = array();

  $line_item = array(
    'line_item_id' => 'subtotal',
    'type' => 'subtotal',
    'title' => 'Subtotal',
    'amount' => 100,
    'weight' => 0,
    'data' => '', 
  );

  $object->line_items[] = $line_item;
  unset($line_item);

  return $object;
}

/**
 * Replaces fundraiser_confirmation_settings_form_validate().
 */
function email_confirmation_confirmation_form_validate(&$form, &$form_state) {
  // Ensure the entered redirect URL is valid.
  if ($form_state['values']['redirect'] == 'url') {
    $redirect_url = trim($form_state['values']['redirect_url']);
    if (empty($redirect_url)) {
      form_error($form['confirmation_page']['redirection']['redirect_url'], t('A valid URL is required for custom redirection.'));
    }
    elseif (strpos($redirect_url, 'http') === 0 && !valid_url($redirect_url, TRUE)) {
      form_error($form['confirmation_page']['redirection']['redirect_url'], t('The entered URL is not a valid address.'));
    }
    else {
      form_set_value($form['confirmation_page']['redirection']['redirect_url'], $redirect_url, $form_state);
    }
  }
  elseif ($form_state['values']['redirect'] == 'confirmation') {

    form_set_value($form['confirmation_page']['redirection']['redirect_url'], '<confirmation>', $form_state);
  }
  else {
    form_set_value($form['confirmation_page']['redirection']['redirect_url'], '<confirmation>', $form_state);
  }
}

/**
 * Implements hook_theme().
 */
function email_confirmation_theme() {
return array(
    'default_confirmation_template' => array(
      'arguments' => array('order' => NULL, 'site_url' => NULL, 'site_name' => NULL),
      'template' => 'email-confirmation-default-template',
    ),
  );
}


/**
 * 
 */
function email_confirmation_template_list() {
  global $user;
  $result = db_query("SELECT n.nid, n.uid, n.title, n.created, n.changed FROM {node} n WHERE n.type = 'confirmation_template' ORDER BY n.changed DESC");

  $header = array('Internal Name', 'Last Modified', '', '');
  $rows = array();

  while ($data = db_fetch_object($result)) {
    if (user_access('edit any confirmation_template content', $user) || ($data->uid == $user->uid && user_access('edit own confirmation_template content', $user))) {
      $edit_link = l('edit', 'node/' . $data->nid . '/edit');
    }
    $view_link = l('view', drupal_get_path_alias('node/' . $data->nid));
    
    $rows[] = array($data->title, date('m/d/Y g:i:s a', $data->changed), $edit_link, $view_link);
  }

  $output = theme('table', $header, $rows);
  return $output;  

}

/**
 * Loads template data from the database.
 * 
 * @param $nid
 * Int Node ID
 * 
 * @return 
 * Returns a template object.
 */
function email_confirmation_load_template($nid) {
  $template = db_fetch_object(db_query('SELECT * FROM {content_type_confirmation_template} WHERE nid = %d', $nid));
  $results = db_query('SELECT delta, field_confirmation_bcc_email FROM {content_field_confirmation_bcc} ORDER BY delta DESC');
  while ($item = db_fetch_object($results)) {
    $bcc[$item->delta] = $item->field_confirmation_bcc_email;
  }
  $template->bcc = implode(';', $bcc);
  
  return $template;
}


function email_confirmation_fundraiser_confirmations_perm($perm, $node) {
  $webform_node_types = variable_get('webform_node_types', '');
  if (in_array($node->type, $webform_node_types) && node_access($perm, $node)) {
    $is_webform_user = db_result(db_query('SELECT 1 FROM {webform_user} WHERE is_webform_user = 1 AND nid = %d ', $node->nid));
    if (fundraiser_is_donation_type($node->type) || $is_webform_user) {
      return true;
    }
  }
  return false;
}

/**
 * Sends a confirmation email on webform submission.
 */
function email_confirmation_webform_send_mail($form, $form_state) {
  global $user;
  
  $nid = $form_state['values']['details']['nid'];  
  $settings = db_fetch_object(db_query('SELECT * FROM {fundraiser_confirmations} WHERE nid = %d', $nid));

  if ($settings->send_mail) {

    // We need to track down the cid for the mail field. This submitted value is used as the To: field in the sent mail.  
    $mail_cid = _email_confirmation_find_cid('mail', (isset($form_state['webform']['component_tree']['children']) ? $form_state['webform']['component_tree']['children'] : $form['#node']->webform['components']));  
    $node = $form['#node'];
    $sid = $form_state['values']['details']['sid'];
    $submission = webform_get_submission($node->nid, $sid); 
    
    $user_email = $form_state['values']['submitted'][$mail_cid];
    
    $result = db_fetch_object(db_query('SELECT body, format FROM {node_revisions} nr INNER JOIN {node} n WHERE n.vid = nr.vid AND nr.nid = %d', $settings->tid));
    $template_html = check_markup($result->body, $result->format, FALSE);

    $template_text = db_result(db_query('SELECT field_confirmation_text_message_value FROM {content_type_confirmation_template} t INNER JOIN {node} n ON n.vid = t.vid WHERE t.nid=%d', $settings->tid));
    
    
    $message = array();
    $message['from_name'] = $settings->from_name;
    $message['from_address'] = $settings->reply_to_email;
    $message['subject'] = token_replace($settings->subject, 'order', $node);

    // Perform token replacements for "order" tokens and "all" tokens.
    $message['html_body'] = token_replace($template_html, 'order', $node);
    $message['html_body'] = token_replace($message['html_body'], 'order', $node);

     
    // Same as above, with check_plain() included to insure final output is plain text.
    $message['text_body'] = token_replace($template_text, 'all', $node);
    $message['text_body'] = token_replace($message['text_body'], 'all', $node);
    $message['text_body'] = check_plain($message['text_body']);
    $message['bcc'] = $settings->bcc_email;

    $sent = drupal_mail('email_confirmation', 'confirmation', $user_email, language_default(), $message);
  }
}

/**
 * recursively search a webform component tree for a specific component id
 * 
 * @param $form_key
 * Form key of the component you are looking for
 * 
 * @param $children
 * array of webform components
 * 
 * @return
 * returns the numeric component id. This is useful for fishing submitted values out of 
 * webform submission objects, $form_state, etc.
 */
function _email_confirmation_find_cid($form_key, $children) {
  $cid = '';
  foreach ($children as $child) {
    if (isset($child['children'])) {
      $cid = _email_confirmation_find_cid($form_key, $child['children']);
    }
    elseif ($child['form_key'] == $form_key) {
      $cid =  $child['cid'];
    }
  }
  return $cid;
}

/**
 * Implements hook_fundraiser_clone_donation_form().
 * 
 * We want to clone any email confirmation settings for the original node.
 */
function email_confirmation_fundraiser_clone_donation_form($old_nid, $new_nid) {

  $result = db_query('SELECT * FROM {fundraiser_confirmations} WHERE nid = %d', $old_nid);
  $settings = db_fetch_object($result);
  if (isset($settings->tid)) {
    db_query("INSERT INTO {fundraiser_confirmations} (
        nid,
        tid,
        subject,
        from_name,
        reply_to_email,
        bcc_email,
        html_message, 
        html_message_format,
        text_message,
        text_message_format,
        is_webform,
        send_mail) 
      VALUES (%d, %d, '%s', '%s', '%s', '%s', '%s', %d, '%s', %d, %d, %d)",
      $new_nid, 
      $settings->tid, 
      $settings->subject, 
      $settings->from_name, 
      $settings->reply_to_email, 
      $settings->bcc_email, 
      $settings->html_message, 
      $settings->html_message_format, 
      $settings->text_message, 
      $settings->text_message_format, 
      $settings->is_webform, 
      $settings->send_mail);
  }
}
