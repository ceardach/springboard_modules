<?php

/**
 * @file
 * Adds multiple currency support to donation forms.
 */

/**
 * Implements hook_menu().
 */
function fundraiser_multi_currency_menu() {
  $items = array();
  $items['admin/config/system/currencies'] = array(
    'title' => 'Manage currencies',
    'description' => 'Define the default currencies that will be added to new donation forms.',
    'page callback' => 'fundraiser_multi_currency_admin',
    'file' => 'fundraiser_multi_currency.admin.inc',
    'access arguments' => array('manage currencies'),
    'springboard admin type' => array('Donations'),
  );
  $items['admin/config/system/currencies/list'] = array(
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'title' => 'List currencies',
    'page callback' => 'fundraiser_multi_currency_admin',
    'file' => 'fundraiser_multi_currency.admin.inc',
    'access arguments' => array('manage currencies'),
  );
  $items['admin/config/system/currencies/add'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Add currency',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fundraiser_multi_currency_add'),
    'file' => 'fundraiser_multi_currency.admin.inc',
    'access arguments' => array('manage currencies'),
  );
  $items['admin/config/system/currencies/edit'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Edit currency',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fundraiser_multi_currency_edit'),
    'file' => 'fundraiser_multi_currency.admin.inc',
    'access arguments' => array('manage currencies'),
  );
  $items['admin/config/system/currencies/delete'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Delete currency',
    'page callback' => 'fundraiser_multi_currency_delete',
    'file' => 'fundraiser_multi_currency.admin.inc',
    'access arguments' => array('manage currencies'),
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function fundraiser_multi_currency_permission() {
  return array(
    'manage currencies' => array(
      'title' => t('manage currencies'),
      'description' => t('Manage available currancies for donation forms.'),
    ),
  );
}

/**
 * Implements hook_fundraiser_field_info().
 */
function fundraiser_multi_currency_fundraiser_field_info() {
  $fields = array();
  $fields['donation']['currency'] = array(
    '#title' => 'Currency',
    '#type' => 'hidden',
    '#required' => 1,
    '#create_callback' => '_fundraiser_multi_currency_field_create',
  );
  return $fields;
}

/**
 * Creation callback for the currency field, set the value to the setting in the donation form.
 */
function _fundraiser_multi_currency_field_create($fundraiser, $field) {
  // Set a default currancy per the fundraiser settings.
  if (isset($fundraiser->default_currency)) {
    $field['#value'] = $fundraiser->default_currency;
  }
  // If they chose to allow users to pick their currency, add a dropdown for currencies
  if (isset($fundraiser->multiple_currency_support) && ($fundraiser->multiple_currency_support == 'show')) {
    // Get a list of currencies to use as defaults.
    $currencies = fundraiser_multi_currency_get_currencies();
    $default_currencies = '';
    foreach ($currencies as $code => $row) {
      $default_currencies .= $code . '|' . $row['name'] . "\n";
    }
    $default_currencies = trim($default_currencies);
    $field['#type'] = 'select';
    $field['#extra']['items'] = $default_currencies;
    $field['#extra']['multiple'] = 0;
    $field['#extra']['aslist'] = 'Y';
  }
  return $field;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node forms.
 */
function fundraiser_multi_currency_form_node_form_alter(&$form, &$form_state, $form_id) {
  // If this isn't a fundraiser type, ignore it.
  if (fundraiser_is_donation_type($form['#node']->type)) {
    // Only add the multi-currency option to the form when creating a donation form, not when editing it.
    // Why? Because we DO NOT STORE THESE VALUES. They are only used during the creation of fields.
    // Sicne we don't store them, we don't update the fields, and we don't want to confused users,
    // we only show this information when a node is new.
    if (!(isset($form['#node']->nid))) {
      $form['fundraiser_settings']['fundraiser_multi_currency'] = array(
        '#type' => 'fieldset',
        '#title' => t('Fundraiser multiple currencies'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
      );
      $form['fundraiser_settings']['fundraiser_multi_currency']['multiple_currency_support'] = array(
        '#type' => 'radios',
        '#title' => t('Support multiple currencies'),
        '#description' => t('Should this form support multiple currencies?'),
        '#options' => array(
          'hide' => t('Hide currency from user and always use the default.'),
          'show' => t('Allow the user to choose their currency from a dropdown.'),
        ),
        '#default_value' => 'hide',
      );
      $form['fundraiser_settings']['fundraiser_multi_currency']['default_currency'] = array(
        '#type' => 'textfield', // TODO this should be a dropdown based on available currencies.
        '#title' => t('Default currency'),
        '#description' => t('If you give users the option to choose their currency, this will be selected by default. ' .
          'Otherwise, this will be used for all donations.'),
        '#size' => 40,
        '#maxlength' => 10,
        '#default_value' => 'USD',
        '#required' => TRUE,
      );
    }
  }
}

/**
 * Implements hook_fundraiser_donation_form().
 */
function fundraiser_multi_currency_fundraiser_donation_form($form, $form_state) {
  // Get the list of currencies in use and save them to the JS object
  // Get the available currencies.
  $currencies = fundraiser_multi_currency_get_currencies();

  // Set the symbol shown on the form amount and other-amount fields to match the default.
  $currency_field = fundraiser_get_form_field('fundraiser_multi_currency', $form, 'currency'); // From fundraiser.module, get a field.
  if (isset($currency_field) && !empty($currency_field)) {
    // Add js to support switching as needed.
    if ($currency_field['#type'] != 'hidden') {
      drupal_add_js(drupal_get_path('module', 'fundraiser_multi_currency') . '/js/fundraiser_multi_currency.js');
      // Pass the default value up so our js knows where to start.
      drupal_add_js(array('fundraiser_multi_currency' => array(
          'currencies' => $currencies,
          'original' => isset($currency_field['#default_value']) ? $currency_field['#default_value'] : 'USD')
        ),
        'setting');
    }
    // Then set defaults for other fields.
    $selected_currency = isset($currency_field['#default_value']) ? $currency_field['#default_value'] : '';
    if (isset($currencies[$selected_currency])) {
      // First check for other amount.
      $other_amount_field = fundraiser_get_form_field('fundraiser_multi_currency', $form, 'other_amount');
      if (isset($other_amount_field) && !empty($other_amount_field)) {
        $other_amount_field['#field_prefix'] = $currencies[$selected_currency]['symbol'];
        if (isset($other_amount_field['#description'])) {
          $other_amount_field['#description'] = str_replace('Minimum payment $',
            'Minimum payment ' . $currencies[$selected_currency]['symbol'],
            $other_amount_field['#description']);
        }
        $form = fundraiser_update_form_field('fundraiser_multi_currency', $form, 'other_amount', $other_amount_field);
        // From fundraiser.module, update a form with new field information.
      }
      // Then update them on regular amount fields as needed.
      $amount_field = fundraiser_get_form_field('fundraiser_multi_currency', $form, 'amount');
      if (isset($amount_field) && !empty($amount_field)) {
        if (isset($amount_field['#options'])) {
          foreach ($amount_field['#options'] as $val => $label) {
            $amount_field['#options'][$val] = str_replace('$', $currencies[$selected_currency]['symbol'], $label);
          }
        }
        else {
          // No ask amounts, so the regular Amount field will actually be the Other field
          // Nobody said this had to be straightforward, right?
          $amount_field['#field_prefix'] = $currencies[$selected_currency]['symbol'];
        }
        $form = fundraiser_update_form_field('fundraiser_multi_currency', $form, 'amount', $amount_field);
      }
    }
  }
  return $form;
}

/**
 * Implements hook_fundraiser_donation_create().
 */
function fundraiser_multi_currency_fundraiser_donation_create($donation) {
  // Add the currency information to the data for donation processing.
  if (isset($donation->donation['currency'])) {
    $donation->data['currency'] = $donation->donation['currency'];
  }
}

/**
 * Database functions.
 */

/**
 * Database function, get an array of the available currencies.
 */
function fundraiser_multi_currency_get_currencies() {
  // Cache the currency list locally.
  static $currencies = array();
  if (empty($currencies)) {
    $results = db_query('SELECT * FROM {fundraiser_currencies}');
    foreach ($results as $row) {
      $row = (array) $row;
      $currencies[$row['code']] = $row;
    }
  }
  return $currencies;
}

/**
 * CRUD style database function.
 */
function fundraiser_multi_currency_create_currancy($record) {
  $record = (array) $record;
  $record_data = FALSE;
  if (isset($record['currency_id'])) {
    $record_data = fundraiser_multi_currency_get_currancy($record['currency_id']);
  }
  if (!$record_data) {
    drupal_write_record('fundraiser_currencies', $record);
  }
  else {
    fundraiser_multi_currency_update_currancy($record);
  }
}

/**
 * CRUD style database function.
 */
function fundraiser_multi_currency_get_currancy($currency_id) {
  return db_query('SELECT * FROM {fundraiser_currencies} WHERE currency_id = :currency_id',
    array(':currency_id' => $currency_id))->fetchObject();
}

/**
 * CRUD style database function.
 */
function fundraiser_multi_currency_update_currancy($record) {
  $record = (array) $record;
  $record_data = FALSE;
  if (isset($record['currency_id'])) {
    $record_data = fundraiser_multi_currency_get_currancy($record['currency_id']);
  }
  if (!$record_data) {
    fundraiser_multi_currency_create_currancy($record);
  }
  else {
    $record = array_merge((array) $record_data, $record);
    drupal_write_record('fundraiser_currencies', $record, 'currency_id');
  }
}

/**
 * CRUD style database function.
 */
function fundraiser_multi_currency_delete_currancy($currency_id) {
  db_delete('fundraiser_currencies')->condition('currency_id', $currency_id)->execute();
}
