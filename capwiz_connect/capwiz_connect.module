<?php
/**
 * @file
 * Capwiz Connect
 *
 * Sync users and actions to Salesforce by querying the Capwiz Connect API
 */

define('CAPWIZ_CONNECT_ADMIN_URL', 'admin/config/salesforce/capwiz_connect');

/**
 * Implementats hook_help().
 */
function capwiz_connect_help($path, $arg) {
  switch ($path) {
    case 'admin/help#capwiz_connect':
      return '<p>' . t('Integrates with the Capwiz Connect API to sync users and actions. Users are saved as Drupal users, and can then be synced to Salesforce using the SF User Integration module. Actions are saved to the DB and synced directly to Salesforce.') . '</p>';
    case 'admin/settings/capwiz_connect/accounts/%/user_mapping':
      return '<p>' . t('Configure Capwiz-to-Drupal mapping for users. Capwiz user accounts are saved as Drupal users. To add more fields to Drupal user accounts, use the Profile module.') . '</p>';
    case 'admin/settings/capwiz_connect/accounts/%/action_mapping':
      return '<p>' . t('Configure Capwiz-to-Salesforce mapping for actions. Capwiz actions are saved to the database, then synced to Salesforce on the next cron maintenance run.') . '</p>';
  }
}

/**
 * Implements hook_menu().
 */
function capwiz_connect_menu() {
  $items = array();

  $items['capwiz_legislative_update'] = array(
    'title' => 'Capwiz legislative update',
    'page callback' => 'capwiz_connect_legislative_update_start',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items[CAPWIZ_CONNECT_ADMIN_URL] = array(
    'title' => 'Capwiz Connect',
    'description' => 'Manage Capwiz Connect accounts',
    'file' => 'capwiz_connect.admin.inc',
    'page callback' => 'capwiz_connect_account_list',
    'access arguments' => array('administer capwiz_connect'),
    'type' => MENU_NORMAL_ITEM,
    'springboard admin type' => array('Salesforce'),
  );

  $items[CAPWIZ_CONNECT_ADMIN_URL . '/accounts'] = array(
    'title' => 'Capwiz Connect',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  $items[CAPWIZ_CONNECT_ADMIN_URL . '/add'] = array(
    'title' => 'Add Account',
    'description' => 'Add a new Capwiz Connect account',
    'file' => 'capwiz_connect.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('capwiz_connect_account_addoredit'),
    'access arguments' => array('administer capwiz_connect'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );

  $items[CAPWIZ_CONNECT_ADMIN_URL . '/settings'] = array(
    'title' => 'Settings',
    'description' => 'Capwiz Connect general settings',
    'file' => 'capwiz_connect.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('capwiz_connect_settings'),
    'access arguments' => array('administer capwiz_connect'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );

  $items[CAPWIZ_CONNECT_ADMIN_URL . '/accounts/%capwiz_connect_account'] = array(
    'title' => 'Capwiz Connect Account',
    'description' => 'Capwiz Connect account overview',
    'file' => 'capwiz_connect.admin.inc',
    'page callback' => 'capwiz_connect_account_overview',
    'page arguments' => array(4),
    'access arguments' => array('administer capwiz_connect'),
    'type' => MENU_CALLBACK,
  );

  $items[CAPWIZ_CONNECT_ADMIN_URL. '/accounts/%capwiz_connect_account/overview'] = array(
    'title' => 'Overview',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  $items[CAPWIZ_CONNECT_ADMIN_URL. '/accounts/%capwiz_connect_account/edit'] = array(
    'title' => 'Edit',
    'description' => 'Edit a Capwiz Connect account',
    'file' => 'capwiz_connect.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('capwiz_connect_account_addoredit', 4),
    'access arguments' => array('administer capwiz_connect'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );

  if (module_exists('salesforce_management_api')) {
    $items[CAPWIZ_CONNECT_ADMIN_URL . '/accounts/%capwiz_connect_account/user_mapping'] = array(
      'title' => 'User Mapping',
      'description' => 'Edit User Mapping for Capwiz Connect Account',
      'file' => 'capwiz_connect.admin.inc',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('capwiz_connect_account_user_mapping', 4),
      'access arguments' => array('administer capwiz_connect'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 3,
    );

    $items[CAPWIZ_CONNECT_ADMIN_URL . '/accounts/%capwiz_connect_account/action_mapping'] = array(
      'title' => 'Action Mapping',
      'description' => 'Edit Action Mapping for Capwiz Connect Account',
      'file' => 'capwiz_connect.admin.inc',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('capwiz_connect_account_action_mapping', 4),
      'access arguments' => array('administer capwiz_connect'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 4,
    );
  }

  $items[CAPWIZ_CONNECT_ADMIN_URL . '/accounts/%capwiz_connect_account/delete'] = array(
    'title' => 'Delete',
    'description' => 'Delete a Capwiz Connect account',
    'file' => 'capwiz_connect.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('capwiz_connect_account_delete', 4),
    'access arguments' => array('administer capwiz_connect'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
  );

  // Expose a callback for the cron run if it's standalone
  if (variable_get('capwiz_connect_standalone_cron_enabled', FALSE)) {
    $items['capwiz_connect_cron'] = array(
      'page callback' => 'capwiz_connect_cron_process',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    );
  }

  // AJAX callback to change the SF object type on user or account mapping
  $items['js/capwiz_connect/salesforce-object-fields'] = array(
    'file' => 'capwiz_connect.admin.inc',
    'page callback' => 'capwiz_connect_render_salesforce_object_fields',
    'access arguments' => array('administer capwiz_connect'),
    'type' => MENU_CALLBACK,
  );

  // Ajax callback to add and remove dedupe keys for Capwiz Account mappings
  $items['js/capwiz_connect/%capwiz_connect_account/set-dedupe-field'] = array(
    'file' => 'capwiz_connect.admin.inc',
    'description' => 'Callback to add a dedupe key',
    'page callback' => 'capwiz_connect_add_dedupe_field',
    'page arguments' => array(2),
    'access arguments' => array('administer capwiz_connect'),
  );

  $items['js/capwiz_connect/%capwiz_connect_account/remove-dedupe-field'] = array(
    'file' => 'capwiz_connect.admin.inc',
    'description' => 'Callback to add a dedupe key',
    'page callback' => 'capwiz_connect_remove_dedupe_field',
    'page arguments' => array(2),
    'access arguments' => array('administer capwiz_connect'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function capwiz_connect_permission() {
  return array(
    'administer capwiz_connect' => array(
      'title' => t('Administer'),
      'description' => t('Add/edit capwiz accounts for this site. Configure sync settings.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function capwiz_connect_theme($existing, $type, $theme, $path) {
  return array(
    'capwiz_connect_account_mapping_form' => array(
      'variables' => array(),
    ),
    'capwiz_connect_user_mapping_form' => array(
      'variables' => array(),
    ),
  );
}

/**
 * Kicks off the legislative update process in Salesforce.
 */
function capwiz_connect_legislative_update_start() {
  // get a connection to salesforce
  $sf = salesforce_management_api_connect();
  if (is_object($sf)) {
    // pluck the session id and server instance from the client connection
    $server_instance = _capwiz_connect_parse_server_instance($sf->client->getLocation());
    $session_id = $sf->client->getSessionId();
    $url = sprintf('https://%s.salesforce.com/services/apexrest/LegislativeUpdate', $server_instance);

    // use curl to request the service endpoint
    $ch = curl_init($url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
    curl_setopt($ch, CURLOPT_HTTPHEADER, array(sprintf('Authorization: OAuth %s', $session_id)));
    curl_setopt($ch, CURLOPT_HEADER, 0);

    // run curl
    try {
      $job = json_decode(curl_exec($ch)); // successful call should return the job id of the batch as a string
      if (!empty($job)) {
        // if we get an array back salesforce is not happy
        if (is_array($job)) {
          watchdog('capwiz_connect', 'Error starting legislative update process. Error code: !code. Message: !message.', array('!code' => $job[0]->errorCode, '!message' => $job[0]->message), WATCHDOG_WARNING);
        }
        // job id string is the expected result
        elseif (is_string($job)) {
          watchdog('capwiz_connect', 'Legislative update process started. Apex JobId: !id', array('!id' => $job), WATCHDOG_INFO);
        }
      }
      // unable to parse response
      else {
        watchdog('capwiz_connect', 'Legislative update process did not start. No JobId was returned.', NULL, WATCHDOG_INFO);
      }
    }
    catch (Exeception $e) {
      watchdog('capwiz_connect', 'An exception was thrown when requesting !url. Exception: !e', array('!url' => $url, '!e' => $e->getMessage()), WATCHDOG_WARNING);
    }
    // close connection
    curl_close($ch);
  }
}

/**
 * Load a Capwiz Connect account. Used for placeholders in menu item URLs
 */
function capwiz_connect_account_load($id, $refresh_cache = FALSE) {
  static $account_details = array();

  if (!isset($account_details[$id]) || $refresh_cache) {
    $account_details[$id] = db_query('SELECT * FROM capwiz_connect_accounts WHERE id = :id', array(':id' => $id))->fetchObject();

    // Load existing mapping for users and actions for this Capwiz account
    /*
    foreach (array('user', 'action') as $mapping_type) {
      $drupal = 'capwiz_connect:' . $id . ':' . $mapping_type;
      $mapping_detail = db_query('SELECT salesforce, fields, business, dedupe_key, recordtype_id FROM {salesforce_management_field_map} WHERE drupal = :drupal', array(':drupal' => $drupal));
      if ($mapping_detail) {
        // Save details in $account_detail->mapping_user or $account_detail->mapping_action
        $field = 'mapping_' . $mapping_type;
        $account_details[$id]->$field = array(
          'sf_object' => $mapping_detail->salesforce,
          'map' => unserialize($mapping_detail->fields),
          'business' => unserialize($mapping_detail->business),
          'dedupe_key' => $mapping_detail->dedupe_key,
          'recordtype_id' => $mapping_detail->recordtype_id,
        );
      }
    }
     */
  }

  if ($account_details[$id]) {
    return $account_details[$id];
  }

  // Could not load the account, so it must not exist. Return FALSE instead
  // of null so that admin pages trying to edit a non-existent account will 404
  return FALSE;
}

/**
 * Get the full list of accounts
 */
function capwiz_connect_all_accounts($refresh_cache = FALSE) {
  static $all_accounts;

  if (!$all_accounts || $refresh_cache) {
    $all_accounts = array();
    $results = db_query('SELECT id FROM {capwiz_connect_accounts}');
    if (!empty($results)) {
      foreach ($results as $record) {
        $all_accounts[$record->id] = capwiz_connect_account_load($record->id, $refresh_cache);
      }
    }
  }
  return $all_accounts;
}

/**
 * Get an instance of CapizConnect
 */
function capwiz_connect($account_id) {
  static $included;
  module_load_include('inc', 'capwiz_connect', 'CapwizConnect');

  $account_details = capwiz_connect_account_load($account_id);
  if ($account_details) {
    return CapizConnect::instance($account_details);
  }
  return NULL;
}




/**
 * Implementation of hook_cron().
 */
function capwiz_connect_cron() {
  $all_accounts = capwiz_connect_all_accounts(TRUE);

  $queue = DrupalQueue::get('capwiz_connect');
  foreach ($all_accounts as $account_id => $account) {
    $queue->createItem($account);
  }
}

/*
* Implements hook_cron_queue_info().
*/
function capwiz_connect_cron_queue_info(){
  $queues['capwiz_connect'] = array(
    'worker callback' => 'capwiz_connect_cron_process',
    'time' => 120,
  );
  return $queues;
}

/**
 * Do the actual cron run
 */
function capwiz_connect_cron_process($account) {
  $connection = capwiz_connect($account->id);
  // Get the current sync type
  $sync_type = variable_get('capwiz_connect_cron_sync_type_' . $account->id, 'users');

  if ($sync_type == 'users') {
    // Sync down a batch of users
    watchdog('capwiz_connect', 'Begin syncing a batch of users from Capwiz for account %account_name', array('%account_name' => $account->display_name));
    $connection->syncUsersBatch();
    $next_sync = 'actions';
  }
  else {
    watchdog('capwiz_connect', 'Begin syncing a batch of actions from Capwiz for account %account_name', array('%account_name' => $account->display_name));
    // Sync down a batch of actions
    $connection->syncActionsBatch();
    $next_sync = 'users';
  }
  variable_set('capwiz_connect_cron_sync_type_' . $account->id, $next_sync);
}




/**
 * Implementation of hook_queue_preprocess_batch_alter().
 * Prep an object to be sent to SF. Mostly copied from sf_webform_queue_preprocess_batch_alter()
 */
function capwiz_connect_queue_preprocess_batch_alter(&$batch) {
  if ($batch['type'] == 'capwiz_connect_action') {
    switch ($batch['action']) {
      case 'update':
      case 'upsert':
      case 'create':
        foreach ($batch['records'] as $record) {
          $map = _capwiz_connect_sf_load_action_details($record->oid);
          if (is_array($record->object)) {
            $record->object = array_merge($record->object, $map['fields']);
          }
          else {
            $record->object = $map['fields'];
          }
          // add the salesforce id to the object on updates
          if ($batch['action'] == 'update') {
            $record->object['Id'] = $record->sfid;
          }
        }
        break;

      case 'delete':

        break;
    }
  }
}

/**
 * Load field mapping for an action object to be passed to Salesforce queue processor.
 */
function _capwiz_connect_sf_load_action_details($oid) {
  static $sf_field_map;

  // If there is an error building the mapping, or the data is incomplete, a generic
  // version of the mapping array should be returned to prevent errors higher up in
  // the stack.
  $blank_return_array = array(
    'object' => '',
    'fields' => array(),
    'RecordTypeId' => '',
  );

  // Load the action data, depending on the type
  $object = _capwiz_connect_load_action($oid);
  if ($object) {
    $account_id = $object->capwiz_account_id;
  }

  if (!($account_id > 0)) {
    return $blank_return_array;
  }

  // Load the Salesforce field map for this Capwiz account, if we have not already
  if (!$sf_field_map[$account_id]) {
    $drupal = 'capwiz_connect:' . $account_id . ':action';
    $sql = "SELECT salesforce, recordtype_id, fields, business FROM {salesforce_management_field_map} WHERE drupal = '%s'";
    $data = db_fetch_object(db_query($sql, $drupal));

    $sf_field_map[$account_id]['map'] = unserialize($data->fields);
    $sf_field_map[$account_id]['business'] = unserialize($data->business);
    $sf_field_map[$account_id]['object'] = $data->salesforce;
    $sf_field_map[$account_id]['recordtype_id'] = $data->recordtype_id;
  }

  $map_details = $sf_field_map[$account_id];

  // If no map is found for this account and type, bail out
  if (!$map_details['map']) {
    return $blank_return_array;
  }

  // Prep map array
  $salesforce_map = array(
    'object' => $map_details['object'],
    'fields' => array(),
  );
  if (!empty($map_details['recordtype_id'])) {
    $salesforce_map['fields']['RecordTypeId'] = $map_details['recordtype_id'];
  }


  // Loop over the mapped fields, and for each that has value on this object, set
  // it in the mapped fields. For any fields that have multiple values, they
  // should be separated with semi-colons (though this is not in use here yet).
  //
  // Note that some of the fields handled here are specific to users or to actions.
  // Such fields will not be available for mapping to the other object type.
  foreach ($map_details['map'] as $capwiz_field_name => $sf_field_name) {
    // Different fields have different formats
    switch ($capwiz_field_name) {
      // Email address
      case 'emailAddress':
        if ($object->data->emailAddress) {
          $salesforce_map['fields'][$sf_field_name] = $object->data->emailAddress;
        }
        break;

      // Affiliation of form
      case 'form_affiliation':
        $account = capwiz_connect_account_load($account_id);
        $salesforce_map['fields'][$sf_field_name] = $account->form_affiliation;
        break;

      // Action timestamp
      case 'action_timestamp':
        if ($object->data->dtAction) {
          // Not sure if SF expects Unix timestamps for date time fields
          $salesforce_map['fields'][$sf_field_name] = strtotime($object->data->dtAction);
        }
        break;

      // Capwiz User in Salesforce. Only on Actions.
      case 'sf_userid':
        if ($object->data->emailAddress) {
          // Load the Salesforce ID for the user
          $sfid = db_result(db_query("SELECT om.sfid FROM {users} u LEFT JOIN {salesforce_management_object_map} om ON om.oid = u.uid AND om.drupal_type = 'user' WHERE u.mail='%s'", $object->data->emailAddress));
          if ($sfid) {
            $salesforce_map['fields'][$sf_field_name] = $sfid;
          }
        }
        break;

      // Every other field. Just load the field from the object
      default:
        $salesforce_map['fields'][$sf_field_name] = $object->data->{$capwiz_field_name};
    }
  }

  return $salesforce_map;
}



/**
 * Implementation of hook_queue_fieldmap_assignment_alter().
 */
function capwiz_connect_queue_fieldmap_assignment_alter(&$data) {
  if ($data->type == 'capwiz_connect_action') {
    $object = _capwiz_connect_load_action($data->oid);
    if ($object) {
      $account_id = $object->capwiz_account_id;
    }

    if (!($account_id > 0)) {
      return;
    }

    // Load the field map for the Account the user came in from
    $drupal = 'capwiz_connect:' . $account_id . ':action';
    $result = db_query("SELECT fieldmap, dedupe_key FROM {salesforce_management_field_map} WHERE drupal = '%s'", $drupal);

    $fieldmap = db_fetch_array($result);
    $data->fieldmap = $fieldmap['fieldmap'];

    $result = db_fetch_array(db_query("SELECT sfid FROM {salesforce_management_object_map} WHERE oid = '%s' AND drupal_type = '%s'", $data->oid, $data->type));
    // check the action. by default users go into the queue as upsert, but if the
    // mapping has no dedupe key defined, revert to create
    if (empty($fieldmap['dedupe_key']) && empty($result['sfid'])) {
      $data->action = 'create';
    }
  }
}



/**
 * Load a single Capwiz action from the locally stored data
 * Note that the argument must be the LOCAL id for the action, matching
 * capwiz_connect_actions.id. This field is used as the oid in the Salesforce queue
 * processor because the alertId field from Capwiz is an int, but too large for a
 * regular MySQL int field, so it couldn't be stored in tables like sf_queue without
 * altering the structure of tables owned by other modules.
 */
function _capwiz_connect_load_action($local_action_id) {
  $capwiz_action = db_fetch_object(db_query('SELECT * FROM {capwiz_connect_actions} WHERE id=%d', $local_action_id));
  if ($capwiz_action) {
    $capwiz_action->data = unserialize($capwiz_action->data);
    return $capwiz_action;
  }
  return NULL;
}
/**
 * Takes a Salesforce url and returns the server instance.
 *
 * @param $url
 *   The full url of the connected Salesforce server.
 */
function _capwiz_connect_parse_server_instance($url) {
  $parsed_url = parse_url($url);
  $host_parts = explode('.', $parsed_url['host']);
  return str_ireplace('-api', '', $host_parts[0]); // strip -api to get real server instance
}
