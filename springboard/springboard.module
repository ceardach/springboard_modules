<?php

/**
 * @file
 * Provides a admin facing interface to the Springboard system.
 */

/**
 * Implements hook_permission().
 */
function springboard_permission() {
  return array(
    'administer springboard' => array(
      'title' => t('Administer Springboard'),
      'description' => t('Perform administration tasks for springboard.'),
    ),
    'access springboard dashboard' => array(
      'title' => t('Access the Springboard dashboard'),
      'description' => t('Access the main landing page for springboard.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function springboard_menu() {
  $items = array();

  // Springboard settings.
  $items['admin/springboard'] = array(
    'title' => 'Springboard',
    'description' => 'Configure Springboard.',
    'access arguments' => array('administer springboard'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('springboard_admin_settings'),
    'file' => 'springboard.admin.inc',
    'type' => MENU_NORMAL_ITEM,
    'springboard admin type' => array('Springboard'),
  );
  $items['admin/springboard/config'] = $items['admin/springboard'];
  $items['admin/springboard/config']['type'] = MENU_DEFAULT_LOCAL_TASK;

  // Springboard-related modules.
  $items['admin/springboard/modules'] = array(
    'title' => 'Springboard Modules',
    'description' => 'Quickly access and configure Springboard-related modules.',
    'access arguments' => array('administer springboard'),
    'page callback' => 'springboard_modules_page',
    'file' => 'springboard.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function springboard_theme($existing, $type, $theme, $path) {
  return array(
    'springboard_sf_status' => array(
      'variables' => array('status' => '', 'identity' => array(), 'batch_status' => '', 'queue' => ''),
      'template' => drupal_get_path('theme', $theme) . '/templates/springboard-sf-status',
    ),
    'springboard_help' => array(
      'variables' => array('help_array' => array()),
      'template' => drupal_get_path('theme', $theme) . '/templates/springboard-help',
    ),
  );
}

/**
 * Implements hook_springboard_help().
 */
function springboard_springboard_help() {
  $help_array = array();
  $help_array[t('Documentation')] = array(
    t('Springboard documentation is available on !docs.',
      array('!docs' => l('gospringboard.com', 'http://www.gospringboard.com/documentation')))
  );
  $help_array[t('Issue Tracker')] = array(
    t('The Springboard project issue tracker is hosted on !issue_tracker',
      array('!issue_tracker' => l('drupal.org', 'http://drupal.org/project/springboard')))
  );
  return $help_array;
}

/**
 * Hook callback. For the Springboard Salesforce Status pane.
 */
function _springboard_sf_status() {
  $output = '';
  if (module_exists('salesforce')) {
    $identity = array();
    // Call on the module to get the current connection status
    $sf = salesforce_get_api();
    $status = FALSE;
    if ($sf->isAuthorized()) {
      $status = TRUE;
      $identity = $sf->getIdentity();
    } else {
      $status = FALSE;
    }
    // Latest batch # total items :: success :: fail.
    $batch_status = t('Batch info unavailable, please install Salesforce Log.');
    if (module_exists('salesforce_log')) {
      $query = db_select('salesforce_log_batch', 'sflog')
        ->fields('sflog')
        ->orderBy('bid', 'DESC')
        ->range(0,1)
        ->execute();
      $batch = $query->fetchObject();
      if ($batch) {
        $batch_status = t('Batch # @id - @record_count::<span class="successes">@success_count</span>::' .
          '<span class="failures">@fail_count</span>',
          array('@id' => $batch->bid, '@record_count' => $batch->count, '@success_count' => $batch->successes,
          '@fail_count' => $batch->failures));
      }
      else {
        $batch_status = t('No batches processed yet.');
      }
    }
    $queue = (module_exists('salesforce_queue') && $status) ? drupal_get_form('springboard_dashboard_queue') : '';
    return theme('springboard_sf_status', array('status' => $status, 'identity' => $identity, 'batch_status' => $batch_status, 'queue' => $queue));
  }
  return 'status';
}

/**
 * Springboard dashboard queue processor button
 */
function springboard_dashboard_queue() {
  $form = array();
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#prefix' => t('Run Springboard Sync'),
    '#submit' => array('springboard_dashboard_queue_submit'),
  );
  return $form;
}

/**
 * Submit handler for Springboard dashboard queue processor button
 */
function springboard_dashboard_queue_submit(&$form_state) {
  salesforce_queue_process_queue();
}

/**
 * Helper functions.
 */

/**
 * Helper function, sort donation forms by conversion rate.
 */
function _springboard_sort_by_conversion($a, $b) {
  if (isset($a['conversion']) && isset($b['conversion'])) {
    if ($a['conversion'] == $b['conversion']) {
      return 0;
    }
    return ($a['conversion'] > $b['conversion']) ? -1 : 1;
  }
  return -1;
}

/**
 * Helper function.
 * Sets CSS class for dashboard elements based on comparison between the current value and the threshold value.
 *
 * @param $threshold
 * Int threshold value.
 *
 * @param $value
 * Int current value.
 *
 * @param $op
 * Specifies which type of comparison to perform, options are 'min' or 'max', defaults to min.
 */
function springboard_set_dashboard_class($threshold, $value, $op = 'min') {
  $value = preg_replace('/\%|ms/', '', $value);
  if (!$threshold || !is_numeric($value)) {
    $class = 'no-threshold';
  }
  else {
    switch ($op) {
      case 'min':
        $class = ($value >= $threshold) ? 'successes' : 'failures';
        break;
      case 'max':
        $class = ($value <= $threshold) ? 'successes' : 'failures';
        break;
    }
  }
  return $class;
}

/**
 * Helper function.
 * Calculate performance percentages.
 *
 * @param $a
 * Int first number.
 *
 * @param $b
 * Int second number.
 *
 * @return
 * Returns a percentage or N/A if either number is zero.
 */
function _springboard_percentage($a, $b) {
  if ($a && $b) {
    return round(100 * $a / $b) . '%';
  }
  else {
    return 'N/A';
  }
}

/**
 * Additional universal behaviors.
 */

/**
 * Implements hook_form_alter().
 */
function springboard_form_alter(&$form, &$form_state, $form_id) {
  // Alter the webform client form.
  // Why hook_form_alter and not hook_form_FORM_ID_alter?
  // Because webform's form id varies: webform_client_form_NID.
  if (strstr($form_id, 'webform_client_form') !== FALSE) {
    // Include the file with the user profile list. TODO for effeciency, move user profile list to .module
    module_load_include('inc', 'springboard', 'springboard.admin');
    $user_profile_fields = _springboard_default_user_profile();
    // For each user profile, update the field with the given value.
    foreach ($user_profile_fields as $user_profile_field) {
      $field_name = $user_profile_field['field_name'];
      $input_class = isset($user_profile_field['extra']['classes']) ? $user_profile_field['extra']['classes'] : 'input-medium';
      $field = _springboard_get_form_field($form, $field_name);
      $field['#attributes']['class'][] = $input_class;
      $form = _springboard_update_form_field($form, $field_name, $field);
    }
  }
}

/**
 * Given a standard form array. Locate a given key and return it.
 * Recursive.
 */
function _springboard_get_form_field($form, $field_key) {
  // Walks a given form looking for the given key. Returns it when found.
  foreach (element_children($form) as $child) {
    if ($child == $field_key) {
      // Return the found array.
      return $form[$child];
    }
    else {
      // Check this child for other children.
      $found = _springboard_get_form_field($form[$child], $field_key);
      if (!empty($found)) {
        return $found;
      }
    }
  }
}

/**
 * Given a standard form array. Locate a given key and update it.
 * Recursive.
 */
function _springboard_update_form_field($form, $field_key, $new_field) {
  // Walks a given form looking for the given key. Returns it when found.
  foreach (element_children($form) as $child) {
    if ($child == $field_key) {
      // Update the array.
      $form[$child] = array_merge($form[$child], $new_field);
    }
    else {
      // Check this child for other children.
      $form[$child] = _springboard_update_form_field($form[$child], $field_key, $new_field);
    }
  }
  return $form;
}

