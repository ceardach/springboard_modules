<?php

/**
 * @file
 * This module provides functionality for pre-popluating forms from an ecrypted query string parameter.
 * 
 */

/**
 * Implements hook_menu().
 */
function secure_prepopulate_menu() {
  $items['admin/config/secure-prepopulate'] = array(
    'title' => t('Secure pre-populate'),
    'description' => t('Settings secure pre-populate'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('secure_prepopulate_admin_settings'),
    'access arguments' => array('administer secure pre-populate'),
    'file' => 'secure_prepopulate.admin.inc',
  );
  
  $items['secure-prepopulate/not-me/%'] = array(
    'title' => t('Not me'),
    'page callback' => 'secure_prepopulate_clear',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );
  
  return $items;
}

/**
 * Callback for clearing node specific prepopulate values.
 *
 * @param $nid
 *   The nid of the node who's prepopulate data should be cleared.
 */
function secure_prepopulate_clear($nid) {
  global $user;
  secure_prepopulate_clear_session($nid);
  
  if (user_is_logged_in()) {
    // log current user out
    watchdog('user', 'Session closed for %name.', array('%name' => $user->name));
    module_invoke_all('user_logout', $user);
    session_destroy();
  }
  
  drupal_goto('node/' . $nid);
}

/**
 * Implements hook_theme(). 
 */
function secure_prepopulate_theme() {
  // register a theme function for rendering the 'not me' message
  return array(
    'secure_prepopulate_welcome_message' => array(
      'variables' => array('values' => NULL, 'nid' => NULL),
      'template' => 'secure-prepopulate-welcome',
      'path' => drupal_get_path('module', 'secure_prepopulate') . '/templates',
      'pattern' => 'secure_prepopulate_welcome_message_[0-9]+',
    ),
  );
}

/**
 * Implements hook_node_view(). 
 * 
 * Adds a welcome_back key to the node for themeing and output.
 */
function secure_prepopulate_node_view($node, $view_mode, $langcode) {
  // first check to see if there are any prepopulate values available
  if (isset($_SESSION['secure_prepopulate_values']) && is_array($_SESSION['secure_prepopulate_values'])) {
    if ($view_mode == 'full' && !empty($node->webform) && array_key_exists($node->nid, $_SESSION['secure_prepopulate_values'])) {
      $node->content['welcome_back'] = array(
        '#weight' => -1,
        '#markup' => theme(
          array('secure_prepopulate_welcome_message_' . $node->nid, 'secure_prepopulate_welcome_message'),
          array(
            'values' => $_SESSION['secure_prepopulate_values'][$node->nid],
            'nid' => $node->nid,
          )
        ),
      );
    }
  }
}

/**
 * Implements hook_permission().
 */
function secure_prepopulate_permission() {
  return array(
    'administer secure pre-populate' => array(
      'title' => t('Administer Secure Pre-Populate settings'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implementation of hook_init().
 */
function secure_prepopulate_init() {
  // check for the presence of the af query string parameter and we're on a node page
  if (isset($_GET['af']) && arg(0) == 'node' && is_numeric(arg(1)) && !arg(2)) {
    $af = $_GET['af'];
    $nid = arg(1);
    // Use the full query string for hash expiration.
    $qs = _secure_prepopulate_stringify_get($_GET);
    // first, check to see if the query string has already been used
    if (!secure_prepopulate_is_expired($qs)) {
      // run af param through decryption routine
      if ($fields = secure_prepopulate_decrypt($af)) {
        $_SESSION['secure_prepopulate_values'][$nid] = $fields;
        if (isset($fields['uid']) && is_numeric($fields['uid'])) {
          secure_prepopulate_login_user($fields['uid']);
        }
        // expire the query string
        secure_prepopulate_expire($qs);
      }
    }
  }
}

/**
 * Implementation of hook_form_alter().
 */
function secure_prepopulate_form_alter(&$form, $form_state, $form_id) {
  // make sure the node has a webform
  if (strstr($form_id, 'webform_client_form')) {
    $node = $form['#node'];

    // see if the user has any pre-popluate data for this node in their session
    $prepopulate_data = isset($_SESSION['secure_prepopulate_values'][$node->nid]) ? $_SESSION['secure_prepopulate_values'][$node->nid] : NULL;
    $precedence = variable_get('secure_prepopulate_precedence', 'url');
    
    // if we have some data to pre-populate add a function to call on after_build so we can be sure that we're the last ones to alter the form
    if (!empty($prepopulate_data)) {
      // if a user is logged in, the precedence must be set to url
      if (!user_is_logged_in() || (user_is_logged_in() && $precedence == 'url')) {
        $form['#after_build'][] = 'secure_prepopulate_after_build';       
        $form['#submit'][] = 'secure_prepopulate_submit'; // submit handler to clear out session values  
      }
    }			  
  }
}

/**
 * After build form alteration routine to ensure that url prepopulation is the last thing that happens.
 */
function secure_prepopulate_after_build($form, &$form_state) {
  $node = $form['#node'];
  
  // see if the user has any pre-populate data for this node in their session
  $prepopulate_data = isset($_SESSION['secure_prepopulate_values'][$node->nid]) ? $_SESSION['secure_prepopulate_values'][$node->nid] : array();

  if (!empty($form_state['submitted'])) {
    // Skip the prepopulate work, as we've already submitted the form and it is
    // being validated or otherwise altered by the user. Exit here cleanly.
    return $form;
  }

  $precedence = variable_get('secure_prepopulate_precedence', 'url');
  $components = $node->webform['components'];
  // create an data structure that will tell us exactly where each webform component lives in the FAPI array
  $component_hierarchy = _secure_prepopulate_parse_form($node->nid, $components);

  // try to prepopulate any fields found in the prepopulate_data array
  foreach ($prepopulate_data as $form_key => $value) {
    if (!isset($component_hierarchy[$form_key])) 
      continue;
    if ($field =& _secure_prepopulate_find_field($form, $component_hierarchy[$form_key])) {
      switch ($field['#type']) {
        case 'radios':
          // radios will have individual radio form fields inside them
          if (array_key_exists($value, $field)) {
            $field[$value]['#value'] = $value; 
          }
          break;
        case 'checkboxes':
          // if single checkbox, there will be a inner checkbox field
          if (array_key_exists($value, $field)) {
            $field[$value]['#value'] = $value;
          }
          $value = array($value);
          break;
        case 'date':
          $timezone = $field['#webform_component']['extra']['timezone'] != 'user' ? NULL : 'user';
          $value = webform_date_array($value, 'date');
          $field['month']['#value'] = $value['month'];
          $field['year']['#value'] = $value['year'];
          $field['day']['#value'] = $value['day'];
          break;
      }
      $field['#value'] = $value;  
      $field['#default_value'] = $value;
    }
  }

  // Clear out any other form fields that might be populated by another module
  foreach($component_hierarchy as $form_key => $value) {
    if (!array_key_exists($form_key, $prepopulate_data)) { // the key is not in the prepopuldate data, so lets clear it out
      if ($field =& _secure_prepopulate_find_field($form, $component_hierarchy[$form_key])) {
        // set back to original default value by using the webform component definition
        switch ($field['#type']) {
          case 'hidden':
            // If it's a hidden field, leave the values intact.
            continue;

          case 'date':
            if (drupal_strlen($field['#webform_component']['value']) > 0) {
              $timezone = $field['#webform_component']['extra']['timezone'] != 'user' ? NULL : 'user';
              $default_values = webform_date_array(webform_strtodate('c', $field['#webform_component']['value'], $timezone), 'date');
            }
            else {
              $default_values = array(
                'day' => NULL,
                'month' => NULL,
                'year' => NULL,
              );              
            }
            $field['month']['#value'] = $default_values['month'];
            $field['day']['#value'] = $default_values['day'];
            $field['year']['#value'] = $default_values['year'];
            break;
          
          case 'checkboxes':
            $field[$field['#webform_component']['form_key']]['#value'] = $field['#webform_component']['value'];
            break;  
            
          default:
            if (strpos($field['#webform_component']['value'], '%get[') !== FALSE) {
              // If the default value is %get[something], set the field to nothing.
              $field['#value'] = NULL;
              $field['#default_value'] = NULL;
            }
            else {
              // For all other component default values, copy them to $field.
              $field['#value'] = $field['#webform_component']['value'];
              $field['#default_value'] = $field['#webform_component']['value'];
            }
        }
      }
    }
  }
    
  return $form;
}

/**
 * Submit handler for forms that have been prepopulated.
 */
function secure_prepopulate_submit(&$form, &$form_state) {
  // clear out the session
  $node = $form['#parameters'][2];
  secure_prepopulate_clear_session($node->nid);
}

/**
 * Decrypts query string paramater using a shared key.
 *
 * This function will attempt to decrypt a string with an
 * AES Key and IV that have been preconfigued.
 *
 * @param $cipher
 *   The cipher text to decrypt. 
 */
function secure_prepopulate_decrypt($cipher) {
  $key = variable_get('secure_prepopulate_key', NULL);
  $iv = variable_get('secure_prepopulate_iv', NULL);
  
  if (!$key || !$iv) {
    // log error and exit because we can't continue without a key
    watchdog('Secure pre-populate', t('Cannot perform decryption because AES Key and IV have not been configured correct.'), NULL, WATCHDOG_CRITICAL);
    return;
  }
  
  // decrypt the string
  $raw_qs = _secure_prepopulate_decrypt($cipher, $key, $iv);
  
  // after decryption, parse the values and return them
  return secure_prepopulate_parse_qs($raw_qs);
}

/**
 * Attempts to automatically login a user given their uid.
 *
 * @param $uid
 *   The uid of the user to log in.
 */
function secure_prepopulate_login_user($uid) {
  if (!user_is_logged_in()) {
    $user = user_load($uid);
    if ($user) {
      // log the user in
      $form_state['uid'] = $user->uid;
      user_login_submit(array(), $form_state);
      return TRUE;
    }
    return FALSE;
  }
  
  // already logged in, return TRUE
  return TRUE;
}

/**
 * Parses the decrypted query string into an array.
 *
 * @param $qs
 *   The query string to parse in key/value pair format.
 */
function secure_prepopulate_parse_qs($qs) {
  $result = array();
  $segments = explode('&', $qs);
  
  // loop over each field in the segement and extract the key/value pairs
  if (count($segments)) {
    foreach($segments as $segment) {
      $key_value = explode('=', $segment);
      $result[$key_value[0]] = $key_value[1];
    }   
  }

  // we need to do some special conversions here because ubercart uses numeric ids for state/country
  if (module_exists('uc_store')) {
    // look for billing_country, billing_state specifically
    if (array_key_exists('billing_country', $result)) {
      $result['billing_country'] = _secure_prepopulate_convert_country($result['billing_country']);
    }
    if (array_key_exists('billing_state', $result)) {
      $result['billing_state'] = _secure_prepopulate_convert_state($result['billing_state']);
    }
    if (array_key_exists('country', $result)) {
      $result['country'] = _secure_prepopulate_convert_country($result['country']);
    }
    if (array_key_exists('state', $result)) {
      $result['state'] = _secure_prepopulate_convert_state($result['state']);
    }
  }
  
  // return an array of key/value pairs or an empty array
  return $result;
}


/**
 * Determines if an encrypted query string has already been used.
 *
 * @param $qs
 *   The query string to examine.
 */
function secure_prepopulate_is_expired($qs) {
  $qs_hashed = md5($qs);
  $result = db_query(
    "SELECT COUNT(hash) FROM {secure_prepopulate_expired} WHERE hash = :hashed",
    array(':hashed' => $qs_hashed)
  )->fetchField();

  // if no results it's a new query string
  if ($result == 0) {
    return FALSE;
  }
  
  watchdog('Secure pre-populate', t('Attempted use of encrypted query string @q', array('@q' => $qs_hashed)), NULL, WATCHDOG_NOTICE);
  return TRUE;
}

/**
 * Expires query string so it cannot be used more than once.
 *
 * @param $qs
 *   The query string to expire.
 */
function secure_prepopulate_expire($qs) {
  $qs_hashed = md5($qs);
  $record = new stdClass();
  $record->hash = $qs_hashed;
  $record->expire_date = time();
  drupal_write_record('secure_prepopulate_expired', $record);
}

/**
 * Clears the decrypted values from the user's session.
 *
 * @param $nid
 *   The id of the node who's prepopulated data should be cleared.
 */
function secure_prepopulate_clear_session($nid) {
  unset($_SESSION['secure_prepopulate_values'][$nid]);
}

/**
 * Converts a 2 character iso country code to an ubercart country id.
 *
 * @parm $country
 *   The country code to convert.
 */
function _secure_prepopulate_convert_country($country) {
  $code = db_query(
    "SELECT country_id FROM {uc_countries} WHERE country_iso_code_2 = :country",
    array(':country' => $country)
  )->fetchField();
  if (!empty($code)) {
    return $code;
  }
  // nothing found, return original
  return $country;
}

/**
 * Converts a 2 character state abbreviation to an ubercart zone code.
 *
 * @parm $state
 *   The state abbreviation to convert.
 */
function _secure_prepopulate_convert_state($state) {
  $code = db_query(
    "SELECT zone_id FROM {uc_zones} WHERE zone_code = :state", 
    array(':state' => $state)
  )->fetchField();
  if (!empty($code)) {
    return $code;
  }
  // nothing found, return original
  return $state;
}

/****************************************************************
 * Utility functions for parsing through webforms
 ***************************************************************/
 
/**
 * Creates a nested array of where components exist in the FAPI array for all components in a webform. 
 *
 * @param $nid
 *   The nid of the node that contains the webform.
 * @param $components
 *   The webform components array attached to the node.
 */
function _secure_prepopulate_parse_form($nid, $components) {
  $component_hierarchy = array();
  foreach($components as $cid => $component) {
    $component_path = 'submitted[' . implode('][', _secure_prepopulate_walk_component_hierarchy($nid, $cid)) . ']';
    parse_str($component_path, $output); // convert string to a nested array
    $component_hierarchy[$component['form_key']] = $output;
  }
  return $component_hierarchy;
}

/**
 * Builds a path from the webform component to its topmost parent.
 *
 * @param $nid
 *   The nid of the node that contains the webform.
 * @param $cid
 *   The cid of the webform component being examined.
 * @param $path
 *   The current path to the component within the webform component array.
 *   This path is built up using recursion.
 */
function _secure_prepopulate_walk_component_hierarchy($nid, $cid, &$path = array()) {
  $result = db_query(
    "SELECT cid, pid, form_key FROM {webform_component} WHERE nid = :nid and cid = :cid",
    array(':nid' => $nid, ':cid' => $cid)
  );
  while ($data = $result->fetchObject()) {
    array_unshift($path, $data->form_key);
    if ($data->pid > 0) {
      _secure_prepopulate_walk_component_hierarchy($nid, $data->pid, $path);
    }
  }
  return $path;
}

/**
 * Returns a reference to an element of a FAPI array based on a known path.
 * 
 * @param $form
 *   The form array that contains the field to find.
 * @param $path
 *   A nested array that represents the path to the field within the FAPI array.
 */
function &_secure_prepopulate_find_field(&$form, $path) {
  if (is_array($path)) {
    foreach(array_keys($path) as $v) {
      if (is_array($path[$v]) && count($path[$v])) { // if there are more keys
        return _secure_prepopulate_find_field($form[$v], $path[$v]);
      }
      else {
        return $form[$v];
      }
    }
  }
}

/****************************************************************
 * Encryption functions
 ***************************************************************/

/**
 * Encrypt an input string (128 bit AES) using the specified key and initialization vector.
 *
 * @param $input
 *   The string to encrypt.
 * @param $key
 *   The 128 bit key to use to encrypt the string.
 * @iv
 *   The initialization vector to use to encrypt the string.
 */
function _secure_prepopulate_encrypt($input, $key, $iv)
{
  $size = mcrypt_get_block_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_CBC);
  // account for some PHP AES shortcomings
  $input = pkcs5_pad($input, $size);
  
  // open our encryption algorithm resource, in this case 128 bit AES
  $descriptor = mcrypt_module_open(MCRYPT_RIJNDAEL_128, '', MCRYPT_MODE_CBC, '');
  
  // get buffers ready
  mcrypt_generic_init($descriptor, $key, $iv);    
  
  // encrypt the data
  $cipher = mcrypt_generic($descriptor, $input);
  
  // release resources
  mcrypt_generic_deinit($descriptor);
  mcrypt_module_close($descriptor);
  
  // get the encrypted string ready for web use
  $cipher = base64_encode($cipher);
  $cipher = urlencode($cipher);
  
  return $cipher;
}
 
/**
 * Decrypts AES encrypted data.
 *
 * @param $cipher
 *   The encrypted data to decrypt.
 * @param $key
 *   The 128 bit key to use to decrypt the string.
 * @iv
 *   The initialization vector to use to decrypt the string.
 */ 
function _secure_prepopulate_decrypt($cipher, $key, $iv)
{
  // do some decoding
	$cipher = base64_decode($cipher);

  // open our encryption algorithm resource, in this case 128 bit AES
	$descriptor = mcrypt_module_open(MCRYPT_RIJNDAEL_128, '', MCRYPT_MODE_CBC, '');

  // get buffers ready
	mcrypt_generic_init($descriptor, $key, $iv);
	
	// decrypt the data
	$decrypted_data = mdecrypt_generic($descriptor, $cipher);
	
	// release resources
	mcrypt_generic_deinit($descriptor);
	mcrypt_module_close($descriptor);
	
	// account for some PHP AES shortcomings
	$decrypted_data = pkcs5_unpad($decrypted_data);
	$decrypted_data = rtrim($decrypted_data);
	
	return $decrypted_data;
}

/**
 * Utility function for padding text to PKCS5 specification.
 *
 * @param $text
 *   The text to pad.
 * @param $blocksize
 *   The size of the PKCS5 blocksize to use.
 */ 
function pkcs5_pad($text, $blocksize)
{
   $pad = $blocksize - (strlen($text) % $blocksize);
   return $text . str_repeat(chr($pad), $pad);
}

/**
 * Utility function to unpad PKCS5 padded text.
 *
 * @param $text
 *   The text to unpad.
 */ 
function pkcs5_unpad($text)
{
   $pad = ord($text{strlen($text)-1});
   if ($pad > strlen($text)) return false;
   return substr($text, 0, -1 * $pad);
}


/****************************************************************
 * Miscellaneous utility functions
 ***************************************************************/

/**
 * Standardize the complete query string.
 */
function _secure_prepopulate_stringify_get($get) {
  $string = '';
  ksort($get);
  foreach ($get as $key => $value) {
    $string .= $key . '=' . $value . '&';
  }
  return substr($string, 0, strlen($string) - 1);
}
